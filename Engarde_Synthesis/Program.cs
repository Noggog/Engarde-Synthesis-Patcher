using System;
using System.Collections.Generic;
using System.Linq;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.FormKeys.SkyrimSE;
using Mutagen.Bethesda.Skyrim;
using System.Threading.Tasks;
using Engarde_Synthesis.Settings;
using Noggog;

namespace Engarde_Synthesis
{
    public static class Program
    {
        #region Statics

        private static Lazy<Settings.Settings> _settings = null!;
        private static bool _foundAnotherSneakRootChild;

        #endregion

        #region Enums

        private enum WeaponCritChance
        {
            None = 0,
            Low = 1,
            Medium = 2,
            High = 3
        }

        private enum WeaponArmorPenetration
        {
            Weak = -1,
            None = 0,
            Strong = 1
        }

        #endregion

        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance.AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetAutogeneratedSettings(nickname: "Settings", path: "settings.json", out _settings).Run(args,
                    new RunPreferences()
                    {
                        ActionsForEmptyArgs = new RunDefaultPatcher()
                        {
                            IdentifyingModKey = "MCTPatch.esp", TargetRelease = GameRelease.SkyrimSE,
                        }
                    });
        }

        #region Auxiliary Methods

        /**
         <summary>
          Changes value of short global by FormKey
         </summary>
        */
        private static void ChangeGlobalShortValue(IPatcherState<ISkyrimMod, ISkyrimModGetter> state,
            FormKey globalKey, int value)
        {
            var global = state.LinkCache.Resolve<IGlobalGetter>(globalKey);
            var globalCopy = (IGlobalShort) state.PatchMod.Globals.GetOrAddAsOverride(global);
            globalCopy.Data = (short) value;
        }

        /**
         <summary>
          Adds a keyword to IKeyworded object
         </summary>
        */
        private static void AddKeyword(this IKeyworded<IKeywordGetter> keyworded, FormKey keywordForm)
        {
            keyworded.Keywords ??= new ExtendedList<IFormLink<IKeywordGetter>>();
            keyworded.Keywords.Add(keywordForm);
        }

        /**
         <summary>
          Calculates Stagger stat for weapon based on it's weight and specified multiplier
         </summary>
        */
        private static void SetStagger(this IWeapon weaponCopy, int defaultWeight, float multiplier)
        {
            float weight = weaponCopy.BasicStats!.Weight;
            if (weight <= 0)
            {
                weaponCopy.BasicStats!.Weight = defaultWeight;
            }

            weaponCopy.Data!.Stagger = weight * 0.01f * multiplier;
        }

        /**
         <summary>
          Changes stats of specified weapon <br/>
          All parameters except <paramref name="weaponCopy"/> and <paramref name="defaultWeight"/> are optional <br/> 
         </summary>
        */
        private static void ChangeWeapon(this IWeapon weaponCopy, int defaultWeight, float damageMult = 1,
                float reachMult = 1, float speedMult = 1, float critMult = 1, float staggerMult = 1,
                WeaponCritChance critChance = WeaponCritChance.None,
                WeaponArmorPenetration armorPenetration = WeaponArmorPenetration.None)
            // is this method needed?
            // or is it better to do it in place?
        {
            FormKey critKey = critChance switch
            {
                WeaponCritChance.Low => Engarde.Keyword.MCT_CanCritLow,
                WeaponCritChance.Medium => Engarde.Keyword.MCT_CanCritMed,
                WeaponCritChance.High => Engarde.Keyword.MCT_CanCritHigh,
                _ => FormKey.Null
            };
            if (!critKey.IsNull)
            {
                weaponCopy.AddKeyword(critKey);
            }


            if (weaponCopy.Data!.Flags.HasFlag(WeaponData.Flag.BoundWeapon))
            {
                weaponCopy.BasicStats!.Weight = defaultWeight;
                weaponCopy.AddKeyword(Engarde.Keyword.MCT_PenetratesArmorKW);
            }
            else
            {
                switch (armorPenetration)
                {
                    case WeaponArmorPenetration.Weak:
                        weaponCopy.AddKeyword(Engarde.Keyword.MCT_WeakAgainstArmored);
                        break;
                    case WeaponArmorPenetration.Strong:
                        weaponCopy.AddKeyword(Engarde.Keyword.MCT_PenetratesArmorKW);
                        break;
                }
            }

            weaponCopy.BasicStats!.Damage = (ushort) Math.Round(weaponCopy.BasicStats.Damage * damageMult);
            weaponCopy.Data.Speed *= speedMult;
            weaponCopy.Data.Reach *= reachMult;
            weaponCopy.SetStagger(defaultWeight, staggerMult);
            weaponCopy.Critical!.Damage = (ushort) Math.Round(weaponCopy.BasicStats!.Damage *
                                                              _settings.Value.weaponSettings.weaponCritDamageMult *
                                                              critMult);
        }

        /**
         <summary>
          Checks if Attack has AttackData, Stagger and AttackEvent
         </summary>
        */
        private static bool IsValidAttack(IAttackGetter attack)
        {
            return attack.AttackData?.Stagger != null && !attack.AttackEvent.IsNullOrEmpty();
        }

        /**
         <summary>
          Copies winning override of Idle Animation into patch by using FormKey
         </summary>
         */
        private static IIdleAnimation CopyIdle(IPatcherState<ISkyrimMod, ISkyrimModGetter> state, FormKey idleKey)
        {
            var idle = state.LinkCache.Resolve<IIdleAnimationGetter>(idleKey);
            IIdleAnimation idleCopy = state.PatchMod.IdleAnimations.GetOrAddAsOverride(idle);
            return idleCopy;
        }

        /**
         <summary>
          Changes basic stats of specified attack <br/>
          All parameters except attack are optional <br/> 
         </summary>
        */
        private static void ChangeBasicAttackStats(IAttack attack, int? strikeAngle = null,
                float attackChance = float.NaN,
                float damageMult = 0, float attackAngle = float.NaN)
            //another method just to reduce lines of code(since it have 61 usage =D)
        {
            attack.AttackData!.DamageMult += damageMult;
            if (strikeAngle != null)
            {
                attack.AttackData.StrikeAngle = (float) strikeAngle;
            }

            if (!float.IsNaN(attackAngle))
            {
                attack.AttackData.AttackAngle = attackAngle;
            }

            if (!float.IsNaN(attackChance))
            {
                attack.AttackData.Chance = attackChance;
            }
        }

        private static void SetGeneralAttackData(IAttack attack)
        {
            if (!IsValidAttack(attack)) return;
            string attackEvent = attack.AttackEvent!;
            attack.AttackData!.Knockdown = 0;

            switch (attackEvent)
            {
                case "AttackStartH2HRight":
                    ChangeBasicAttackStats(attack, 45);
                    attack.AttackData.AttackType = Engarde.Keyword.MCT_NormalAttackRight;
                    break;
                case "AttackStartH2HLeft":
                    ChangeBasicAttackStats(attack, 45);
                    attack.AttackData.AttackType = Engarde.Keyword.MCT_NormalAttackLeft;
                    break;
                default:
                {
                    if (attack.AttackData.Spell.IsNull)
                    {
                        if ((attackEvent.Contains("PowerStartLeft") || attackEvent.Contains("PowerStartRight")) &&
                            _settings.Value.basicAttacks.basicAttackTweaks)
                        {
                            attack.AttackData.Spell = Engarde.ASpell.MCT_SidePowerAttackSpell;
                        }
                        else if ((attackEvent == "attackPowerStartBackward" ||
                                  attackEvent == "attackPowerStartBackLeftHand") &&
                                 _settings.Value.powerAttacks.powerAttackTweaks)
                        {
                            attack.AttackData.Spell = Engarde.ASpell.MCT_BackPowerAttackSpell;
                        }
                        else if (attack.AttackData.Flags.HasFlag(AttackData.Flag.BashAttack) &&
                                 _settings.Value.basicAttacks.basicAttackTweaks)
                        {
                            attack.AttackData.Spell = attack.AttackData.Flags.HasFlag(AttackData.Flag.PowerAttack)
                                ? Engarde.ASpell.MCT_PowerBashAttackSpell
                                : Engarde.ASpell.MCT_BashAttackSpell;
                        }
                        else if (attack.AttackData.Flags.HasFlag(AttackData.Flag.PowerAttack) &&
                                 _settings.Value.staggerSettings.weaponStagger)
                        {
                            attack.AttackData.Spell = Engarde.ASpell.MCT_PowerAttackSpell;
                        }
                        else if (_settings.Value.staggerSettings.weaponStagger)
                        {
                            attack.AttackData.Spell = Engarde.ASpell.MCT_NormalAttackSpell;
                        }
                    }

                    break;
                }
            }

            if (attackEvent.Contains("Forward") || attackEvent.Contains("Lunge") || attackEvent.Contains("Bite"))
            {
                attack.AttackData.StrikeAngle = 28;
                attack.AttackData.AttackType = Engarde.Keyword.MCT_VerticalAttack;
            }

            switch (attackEvent)
            {
                case "AttackStart_LeftChop":
                    ChangeBasicAttackStats(attack, 28, attackAngle: -35);
                    break;
                case "AttackStart_RightChop":
                    ChangeBasicAttackStats(attack, 28, attackAngle: 35);
                    break;
                case "attackPowerStartInPlace":
                case "attackPowerStartInPlaceLeftHand":
                    ChangeBasicAttackStats(attack, 28, 1);
                    break;
                case "attackPowerStartForward":
                case "attackPowerStartForwardLeftHand":
                    ChangeBasicAttackStats(attack, 28, 0.1f, 0.5f);
                    attack.AttackData.AttackType = Skyrim.Keyword.PowerAttackTypeForward;
                    break;
                case "attackPowerStartBackward":
                    ChangeBasicAttackStats(attack, 65, 0);
                    attack.AttackData.Flags |= AttackData.Flag.RotatingAttack;
                    break;
                case "attackPowerStartDualWield":
                {
                    ChangeBasicAttackStats(attack, 50, 1, -0.5f);
                    attack.AttackData.Spell = Engarde.ASpell.MCT_DualPowerAttackSpell;
                    break;
                }
                case "attackStartDualWield":
                    ChangeBasicAttackStats(attack, 50, damageMult: -0.25f);
                    break;
                case "attackStart":
                {
                    ChangeBasicAttackStats(attack, 65);
                    attack.AttackData.AttackType = Engarde.Keyword.MCT_NormalAttackRight;
                    break;
                }
                case "attackStartLeftHand":
                {
                    ChangeBasicAttackStats(attack, 50);
                    attack.AttackData.AttackType = Engarde.Keyword.MCT_NormalAttackLeft;
                    break;
                }
                case "bashPowerStart":
                    ChangeBasicAttackStats(attack, 80);
                    break;
                default:
                {
                    if (attackEvent.Contains("PowerStartLeft") || attackEvent.Contains("PowerStartRight"))
                    {
                        ChangeBasicAttackStats(attack, 65, 0, -1);
                        attack.AttackData.Flags |= AttackData.Flag.RotatingAttack;
                    }
                    else if (attackEvent.Contains("Chop"))
                    {
                        ChangeBasicAttackStats(attack, 25);
                        attack.AttackData.AttackType = Engarde.Keyword.MCT_VerticalAttack;
                    }
                    else if (attackEvent.Contains("attack") && attackEvent.Contains("Start") &&
                             attackEvent.Contains("Sprint"))
                    {
                        ChangeBasicAttackStats(attack, 28, 2);
                        attack.AttackData.AttackType = Engarde.Keyword.MCT_SprintAttack;
                    }

                    break;
                }
            }
        }

        private static void SetAtronachFrostAttackData(IAttack attack)
        {
            if (!IsValidAttack(attack))
            {
                return;
            }

            string attackEvent = attack.AttackEvent!;
            attack.AttackData!.Spell = Engarde.ASpell.MCT_PowerAttackSpell;
            switch (attackEvent)
            {
                case "attackPowerStart_ForwardPowerAttack_R1":
                    ChangeBasicAttackStats(attack, attackChance: 5);
                    attack.AttackData.AttackType = FormLink<IKeywordGetter>.Null;
                    break;
                case "attackPowerStart_PowerAttack_L1":
                    ChangeBasicAttackStats(attack, attackChance: 0.7f, attackAngle: -15);
                    break;
                case "attackStart_Attack_L1":
                    ChangeBasicAttackStats(attack, attackChance: 1, attackAngle: -25, damageMult: 0.5f);
                    attack.AttackData.Flags |= AttackData.Flag.PowerAttack;
                    break;
                case "attackStart_Attack_R1":
                    ChangeBasicAttackStats(attack, strikeAngle: 25, attackChance: 1, damageMult: 0.5f, attackAngle: 5);
                    attack.AttackData.Flags |= AttackData.Flag.PowerAttack;
                    break;
                case "bashPowerStart":
                    ChangeBasicAttackStats(attack, strikeAngle: 65);
                    break;
            }
        }

        private static void SetWerewolfAttackData(IAttack attack, bool isWerebeast, bool growlEnabled)
        {
            if (!IsValidAttack(attack))
            {
                return;
            }

            string attackEvent = attack.AttackEvent!;
            attack.AttackData!.Knockdown = 0;
            if (isWerebeast)
            {
                attack.AttackData.Spell = growlEnabled
                    ? Growl.ASpell.HRI_Werewolf_Spell_Attack
                    : Engarde.ASpell.MCT_NormalAttackSpell;
            }

            switch (attackEvent)
            {
                case "AttackStartDual":
                case "AttackStartDualRunning":
                    attack.AttackData.Flags = AttackData.Flag.BashAttack;
                    ChangeBasicAttackStats(attack, 45);
                    attack.AttackData.DamageMult = 0.3f;
                    attack.AttackData.Spell = FormLink<IASpellGetter>.Null;
                    return;
                case "AttackStartDualSprinting":
                case "AttackStartLeftSprinting":
                case "AttackStartRightSprinting":
                    attack.AttackData.Flags = 0;
                    ChangeBasicAttackStats(attack, 55);
                    if (isWerebeast)
                    {
                        attack.AttackData.Spell = Engarde.ASpell.MCT_BeastTackleAttackSpell;
                    }

                    return;
                case "attackStartLeft":
                    ChangeBasicAttackStats(attack, strikeAngle: 40, attackAngle: -30);
                    break;
                case "attackStartRight":
                    ChangeBasicAttackStats(attack, strikeAngle: 40, attackAngle: 30);
                    break;
                case "AttackStartLeftPower":
                case "attackStartRightPower":
                    attack.AttackData.Flags |= AttackData.Flag.PowerAttack;
                    ChangeBasicAttackStats(attack, strikeAngle: 40);
                    attack.AttackData.Stagger = 0.1f;
                    if (isWerebeast)
                    {
                        attack.AttackData.Spell = Engarde.ASpell.MCT_BeastBleedAttackSpell;
                    }

                    break;
                case "AttackStartLeftRunningPower":
                case "AttackStartRightRunningPower":
                    ChangeBasicAttackStats(attack, 30, attackAngle: 0);
                    attack.AttackData.AttackType = Engarde.Keyword.MCT_VerticalAttack;
                    if (isWerebeast)
                    {
                        attack.AttackData.Spell = Engarde.ASpell.MCT_BeastTackleAttackSpell;
                    }

                    break;
                case "AttackStartLeftSide":
                case "AttackStartRightSide":
                    ChangeBasicAttackStats(attack, 20, 0, -0.5f);
                    break;
                case "AttackStartBackHand":
                    ChangeBasicAttackStats(attack, 90, 0, attackAngle: 0);
                    attack.AttackData.Flags |= AttackData.Flag.RotatingAttack;
                    attack.AttackData.StaminaMult = 1.0f;
                    attack.AttackData.AttackType = Engarde.Keyword.MCT_SweepAttack;
                    if (isWerebeast)
                    {
                        attack.AttackData.Spell = Engarde.ASpell.MCT_BackPowerAttackSpell;
                    }

                    break;
            }
        }

        private static void SetBearAttackData(IAttack attack)
        {
            if (!IsValidAttack(attack))
            {
                return;
            }

            string attackEvent = attack.AttackEvent!;
            switch (attackEvent)
            {
                case "attackStart_Attack1":
                case "attackStart_AttackLeft1":
                    ChangeBasicAttackStats(attack, attackAngle: -45);
                    break;
                case "attackStart_Attack2":
                case "attackStart_AttackRight1":
                    ChangeBasicAttackStats(attack, attackAngle: 45);
                    break;
                case "attackStart_StandingPower":
                    ChangeBasicAttackStats(attack, strikeAngle: 65, damageMult: 1);
                    break;
                default:
                    if (attackEvent.Contains("ForwardPower"))
                    {
                        ChangeBasicAttackStats(attack, strikeAngle: 58);
                    }

                    break;
            }
        }

        private static void SetDwarvenSphereAttackData(IAttack attack)
        {
            if (!IsValidAttack(attack))
            {
                return;
            }

            string attackEvent = attack.AttackEvent!;
            if (attackEvent.Contains("Chop"))
            {
                ChangeBasicAttackStats(attack, 28, attackAngle: 15);
            }
            else if (attackEvent.Contains("Stab"))
            {
                ChangeBasicAttackStats(attack, 20, damageMult: 0.5f);
            }
        }

        private static void SetDwarvenCenturionAttackData(IAttack attack)
        {
            if (!IsValidAttack(attack))
            {
                return;
            }

            string attackEvent = attack.AttackEvent!;
            if (_settings.Value.staggerSettings.weaponStagger)
            {
                attack.AttackData!.Stagger = 0;
            }

            switch (attackEvent)
            {
                case "attackStartBack":
                case "attackStartRight":
                    ChangeBasicAttackStats(attack, 70, attackAngle: 150);
                    attack.AttackData!.AttackType = FormLink<IKeywordGetter>.Null;
                    break;
                case "attackStartLeft":
                    ChangeBasicAttackStats(attack, 70, attackAngle: -150);
                    attack.AttackData!.AttackType = FormLink<IKeywordGetter>.Null;
                    break;
                case "attackStartForwardPowerLeft":
                case "attackStartForwardPowerRushLeft":
                    ChangeBasicAttackStats(attack, 60, attackAngle: -10);
                    attack.AttackData!.AttackType = FormLink<IKeywordGetter>.Null;
                    break;
                case "attackStartForwardPowerRight":
                    ChangeBasicAttackStats(attack, 60, attackAngle: 10);
                    attack.AttackData!.AttackType = FormLink<IKeywordGetter>.Null;
                    attack.AttackData.DamageMult = 2;
                    break;
                case "attackStartSlash":
                    ChangeBasicAttackStats(attack, 70, attackAngle: -20);
                    attack.AttackData!.AttackType = FormLink<IKeywordGetter>.Null;
                    attack.AttackData.DamageMult = 0.75f;
                    break;
                case "bashStart":
                    ChangeBasicAttackStats(attack, 70, attackAngle: 20);
                    attack.AttackData!.AttackType = FormLink<IKeywordGetter>.Null;
                    attack.AttackData.DamageMult = 0.5f;
                    break;
                case "attackStartStab":
                case "attackStartChop":
                    ChangeBasicAttackStats(attack, 25, attackAngle: 20);
                    attack.AttackData!.AttackType = Engarde.Keyword.MCT_VerticalAttack;
                    attack.AttackData.DamageMult = 1.25f;
                    break;
            }
        }

        private static void SetDragonAttackData(IAttack attack)
        {
            if (!IsValidAttack(attack))
            {
                return;
            }

            string attackEvent = attack.AttackEvent!;
            switch (attackEvent)
            {
                case "attackStartBite":
                    ChangeBasicAttackStats(attack, 20);
                    attack.AttackData!.Spell = Engarde.ASpell.MCT_DragonBiteAttackSpell;
                    break;
                case "attackStartBiteLeft":
                    ChangeBasicAttackStats(attack, 20, attackAngle: -40);
                    attack.AttackData!.Spell = Engarde.ASpell.MCT_DragonBiteAttackSpell;
                    break;
                case "attackStartBiteRight":
                    ChangeBasicAttackStats(attack, 20, attackAngle: 40);
                    attack.AttackData!.Spell = Engarde.ASpell.MCT_DragonBiteAttackSpell;
                    break;
                case "attackStartTail":
                    ChangeBasicAttackStats(attack, 15, 2);
                    attack.AttackData!.DamageMult = 0;
                    attack.AttackData.Spell = FormLink<IASpellGetter>.Null;
                    attack.AttackData.AttackType = Engarde.Keyword.MCT_DragonTailAttack;
                    break;
                case "attackStartTailLeft":
                    ChangeBasicAttackStats(attack, 40, attackAngle: 110);
                    attack.AttackData!.DamageMult = 0;
                    attack.AttackData.Spell = FormLink<IASpellGetter>.Null;
                    attack.AttackData.AttackType = Engarde.Keyword.MCT_DragonTailAttackLeft;
                    attack.AttackData.Flags |= AttackData.Flag.RotatingAttack;
                    break;
                case "attackStartTailRight":
                    ChangeBasicAttackStats(attack, 40, attackAngle: -110);
                    attack.AttackData!.DamageMult = 0;
                    attack.AttackData.Spell = FormLink<IASpellGetter>.Null;
                    attack.AttackData.AttackType = Engarde.Keyword.MCT_DragonTailAttackRight;
                    attack.AttackData.Flags |= AttackData.Flag.RotatingAttack;
                    break;
                case "attackStartWingLeft":
                    ChangeBasicAttackStats(attack, 20, attackAngle: -80);
                    attack.AttackData!.DamageMult = 0.5f;
                    attack.AttackData.Spell = Engarde.ASpell.MCT_PowerAttackSpell;
                    attack.AttackData.Flags |= AttackData.Flag.RotatingAttack;
                    break;
                case "attackStartWingRight":
                    ChangeBasicAttackStats(attack, 20, attackAngle: 80);
                    attack.AttackData!.DamageMult = 0.5f;
                    attack.AttackData.Spell = Engarde.ASpell.MCT_PowerAttackSpell;
                    attack.AttackData.Flags |= AttackData.Flag.RotatingAttack;
                    break;
            }
        }

        private static void SetFalmerAttackData(IAttack attack)
        {
            if (!IsValidAttack(attack))
            {
                return;
            }

            string attackEvent = attack.AttackEvent!;
            switch (attackEvent)
            {
                case "attackPowerStartForward1":
                    ChangeBasicAttackStats(attack, attackAngle: 10);
                    break;
                case "attackStartAttack4":
                    ChangeBasicAttackStats(attack, 28);
                    break;
            }
        }

        private static void SetSpiderAttackData(IAttack attack, FormKey attackSpellForm)
        {
            if (!IsValidAttack(attack))
            {
                return;
            }

            string attackEvent = attack.AttackEvent!;
            if (attackEvent == "AttackStartLungeBite")
            {
                ChangeBasicAttackStats(attack, 45);
                attack.AttackData!.Spell = Engarde.ASpell.MCT_PowerAttackSpell;
            }

            if (attackEvent == "AttackStart_ComboChop")
            {
                ChangeBasicAttackStats(attack, 20);
            }

            if (attackEvent.Contains("Bite"))
            {
                attack.AttackData!.Spell = attackSpellForm;
            }
        }

        private static void SetGiantAttackData(IAttack attack, bool isGiant)
        {
            if (!IsValidAttack(attack))
            {
                return;
            }

            string attackEvent = attack.AttackEvent!;
            switch (attackEvent)
            {
                case "attackPowerStart_ForwardPowerAttack":
                    ChangeBasicAttackStats(attack, 15, 2, attackAngle: 10);
                    attack.AttackData!.AttackType = Engarde.Keyword.MCT_VerticalAttack;
                    break;
                case "attackPowerStart_Stomp":
                    ChangeBasicAttackStats(attack, 30, 0.3f);
                    attack.AttackData!.AttackType = Engarde.Keyword.MCT_StompAttack;
                    break;
                case "attackStart_ClubAttack1":
                {
                    ChangeBasicAttackStats(attack, 50, attackAngle: 35);
                    if (isGiant)
                    {
                        attack.AttackData!.Flags |= AttackData.Flag.PowerAttack;
                        attack.AttackData.Spell = Engarde.ASpell.MCT_PowerAttackSpell;
                    }

                    break;
                }
                case "attackStart_HandSwipeAttack":
                {
                    ChangeBasicAttackStats(attack, 50, attackAngle: -35);
                    if (isGiant)
                    {
                        attack.AttackData!.Flags |= AttackData.Flag.PowerAttack;
                        attack.AttackData.Spell = Engarde.ASpell.MCT_PowerAttackSpell;
                    }

                    break;
                }
                case "bashStart":
                    ChangeBasicAttackStats(attack, damageMult: -0.5f);
                    attack.AttackData!.Spell = Engarde.ASpell.MCT_NormalAttackSpell;
                    break;
            }
        }

        private static void SetTrollAttackData(IAttack attack)
        {
            if (!IsValidAttack(attack))
            {
                return;
            }

            string attackEvent = attack.AttackEvent!;
            if (attackEvent.Contains("attackStartLeft"))
            {
                ChangeBasicAttackStats(attack, 45, attackAngle: -45);
            }
            else if (attackEvent.Contains("attackStartRight"))
            {
                ChangeBasicAttackStats(attack, 45, attackAngle: 45);
            }
            else if (attackEvent.Contains("attackStartPower"))
            {
                ChangeBasicAttackStats(attack, 45);
            }
        }

        #endregion

        #region Patcher Methods

        private static void PatchArmors(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            foreach (IArmorGetter? armor in state.LoadOrder.PriorityOrder.WinningOverrides<IArmorGetter>())
            {
                if ((armor.BodyTemplate?.Flags.HasFlag(BodyTemplate.Flag.NonPlayable) ?? true) ||
                    !armor.TemplateArmor.IsNull ||
                    (!armor.BodyTemplate?.FirstPersonFlags.HasFlag(BipedObjectFlag.Body) ?? true))
                {
                    continue;
                }

                switch (armor.BodyTemplate!.ArmorType)
                {
                    case ArmorType.LightArmor:
                    {
                        Armor armorCopy = state.PatchMod.Armors.GetOrAddAsOverride(armor);
                        armorCopy.Keywords ??= new ExtendedList<IFormLink<IKeywordGetter>>();
                        armorCopy.Keywords.Add(Engarde.Keyword.MCT_StaggerResist1);
                        break;
                    }
                    case ArmorType.HeavyArmor:
                    {
                        Armor armorCopy = state.PatchMod.Armors.GetOrAddAsOverride(armor);
                        armorCopy.Keywords ??= new ExtendedList<IFormLink<IKeywordGetter>>();
                        armorCopy.Keywords.Add(Engarde.Keyword.MCT_StaggerResist2);
                        armorCopy.Keywords.Add(Engarde.Keyword.MCT_ArmoredKW);
                        break;
                    }
                    default: continue;
                }
            }
        }

        private static void PatchGlobals(this IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            ChangeGlobalShortValue(state, Engarde.Global.MCT_SprintToSneakEnabled,
                _settings.Value.sprintToSneak ? 1 : 0);
            ChangeGlobalShortValue(state, Engarde.Global.MCT_AttackSpeedFixEnabled,
                _settings.Value.fixAttackSpeed ? 1 : 0);
            ChangeGlobalShortValue(state, Engarde.Global.MCT_PlayerAttackControlEnabled,
                _settings.Value.basicAttacks.basicAttackTweaks ? 1 : 0);
            ChangeGlobalShortValue(state, Engarde.Global.MCT_PowerAttackControlEnabled,
                _settings.Value.powerAttacks.powerAttackTweaks ? 1 : 0);
            ChangeGlobalShortValue(state, Engarde.Global.MCT_StaggerByArrowEnabled,
                _settings.Value.staggerSettings.bowStagger ? 1 : 0);
            ChangeGlobalShortValue(state, Engarde.Global.MCT_DefensiveActionEnabled,
                _settings.Value.defensiveActions.defensiveActions ? 1 : 0);
            ChangeGlobalShortValue(state, Engarde.Global.MCT_PowerAttackCoolDownTime,
                _settings.Value.powerAttacks.powerAttackCooldown);
            ChangeGlobalShortValue(state, Engarde.Global.MCT_CGOIntegrationEnabled,
                state.LoadOrder.TryGetIfEnabled(ModKey.FromNameAndExtension("DSerCombatGameplayOverhaul.esp"), out _)
                    ? 1
                    : 0);
        }

        private static void PatchWeapons(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            foreach (IWeaponGetter weapon in state.LoadOrder.PriorityOrder.WinningOverrides<IWeaponGetter>())
            {
                if (!weapon.Template.IsNull || weapon.Data == null)
                {
                    continue;
                }

                Weapon weaponCopy = state.PatchMod.Weapons.GetOrAddAsOverride(weapon);
                weaponCopy.Data!.Speed *= _settings.Value.weaponSettings.weaponSpeedMult;
                weaponCopy.Data!.Reach *= _settings.Value.weaponSettings.weaponReachMult;
                ushort damage = weaponCopy.BasicStats!.Damage;
                weaponCopy.BasicStats!.Damage =
                    (ushort) Math.Round(damage * _settings.Value.weaponSettings.weaponDamageMult);
                if (weaponCopy.BasicStats.Weight == 0)
                {
                    weaponCopy.BasicStats.Weight = 4;
                }

                if (_settings.Value.staggerSettings.critStagger && (weaponCopy.Critical?.Effect.IsNull ?? false))
                {
                    weaponCopy.Critical.Effect = Engarde.ASpell.MCT_CritAttackSpell;
                    weaponCopy.Critical.Flags = 0;
                }

                switch (weaponCopy.Data.AnimationType)
                {
                    case WeaponAnimationType.HandToHand:
                    {
                        if (weaponCopy.Data.Flags.HasFlag(WeaponData.Flag.BoundWeapon))
                        {
                            weaponCopy.BasicStats.Weight = 2;
                            weaponCopy.AddKeyword(Engarde.Keyword.MCT_PenetratesArmorKW);
                        }

                        if (weaponCopy.EditorID == "HRI_Lycan_Weapon_UnarmedWereformWeapon")
                        {
                            weaponCopy.BasicStats.Weight = 4;
                            weaponCopy.AddKeyword(Engarde.Keyword.MCT_WeakAgainstArmored);
                        }

                        break;
                    }
                    case WeaponAnimationType.OneHandSword:
                        weaponCopy.ChangeWeapon(8, reachMult: 1.15f, staggerMult: 0.85f,
                            critChance: WeaponCritChance.Medium, armorPenetration: WeaponArmorPenetration.Weak);
                        break;
                    case WeaponAnimationType.OneHandDagger:
                        weaponCopy.ChangeWeapon(3, critMult: 2, critChance: WeaponCritChance.High,
                            armorPenetration: WeaponArmorPenetration.Weak);
                        break;
                    case WeaponAnimationType.OneHandAxe:
                        weaponCopy.ChangeWeapon(10, 1.1f, 0.8f, 1.1f);
                        break;
                    case WeaponAnimationType.OneHandMace:
                        weaponCopy.ChangeWeapon(12, critMult: 0.5f);
                        break;
                    case WeaponAnimationType.TwoHandSword:
                    case WeaponAnimationType.TwoHandAxe
                        when weaponCopy.Keywords?.Contains(Skyrim.Keyword.WeapTypeGreatsword) ?? false:
                        weaponCopy.ChangeWeapon(14, 0.9f, 1.15f, staggerMult: 1.35f, critChance: WeaponCritChance.Low,
                            armorPenetration: WeaponArmorPenetration.Weak);
                        break;
                    case WeaponAnimationType.TwoHandAxe
                        when weaponCopy.Keywords?.Contains(Skyrim.Keyword.WeapTypeWarhammer) ?? false:
                        weaponCopy.ChangeWeapon(18, 0.9f, speedMult: 0.9f, critMult: 0.5f, staggerMult: 1.65f,
                            armorPenetration: WeaponArmorPenetration.Strong);
                        break;
                    case WeaponAnimationType.TwoHandAxe:
                    {
                        weaponCopy.ChangeWeapon(16, reachMult: 0.8f, speedMult: 1.1f, staggerMult: 1.5f,
                            armorPenetration: WeaponArmorPenetration.Strong);
                        break;
                    }
                    case WeaponAnimationType.Crossbow:
                    case WeaponAnimationType.Bow when weaponCopy.EditorID?.ToLower().Contains("crossbow") ?? false:
                        weaponCopy.ChangeWeapon(12, critMult: 2, staggerMult: 1.5f,
                            armorPenetration: WeaponArmorPenetration.Strong);
                        break;
                    case WeaponAnimationType.Bow:
                        weaponCopy.ChangeWeapon(8, armorPenetration: WeaponArmorPenetration.Weak);
                        break;
                    case WeaponAnimationType.Staff:
                        weaponCopy.ChangeWeapon(8, reachMult: 1.15f, critMult: 0.5f,
                            armorPenetration: WeaponArmorPenetration.Weak);
                        break;
                }
            }
        }

        private static void PatchRaces(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            foreach (var race in state.LoadOrder.PriorityOrder.WinningOverrides<IRaceGetter>())
            {
                if (race.EditorID == null)
                {
                    continue;
                }

                Race raceCopy = state.PatchMod.Races.GetOrAddAsOverride(race);
                bool growlEnabled =
                    state.LoadOrder.ContainsKey(ModKey.FromNameAndExtension("Growl - Werebeasts of Skyrim.esp"));
                string behavior = raceCopy.BehaviorGraph.Male?.File ?? "";
                raceCopy.AngularAccelerationRate = _settings.Value.npcSettings.angularAccelerationMult * 0.25f;
                raceCopy.UnarmedReach = 77;
                raceCopy.UnarmedDamage *= _settings.Value.npcSettings.unarmedDamageMult;

                raceCopy.ActorEffect ??= new ExtendedList<IFormLink<IASpellGetter>>();

                if (_settings.Value.fixAttackSpeed)
                {
                    raceCopy.ActorEffect.Add(Engarde.ASpell.MCT_BaseWeaponSpeedMultSpell);
                }

                if (_settings.Value.staggerSettings.bowStagger)
                {
                    raceCopy.ActorEffect.Add(Engarde.ASpell.MCT_DefaultRaceSpell);
                }

                if (raceCopy.EditorID != "WerewolfBeastRace")
                {
                    raceCopy.Attacks.ForEach(SetGeneralAttackData);
                }

                if (raceCopy.HasKeyword("ActorTypeUndead", state.LinkCache))
                {
                    raceCopy.AddKeyword(Engarde.Keyword.MCT_CritImmune);
                    raceCopy.AddKeyword(Engarde.Keyword.MCT_NoStamina);
                }

                switch (behavior)
                {
                    case "Actors\\AtronachFlame\\AtronachFlame.hkx":
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_CritImmune);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_NoStamina);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerResist1);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerPower1);

                        // base adjustment from vanilla
                        raceCopy.BaseMass = 2;
                        raceCopy.AngularAccelerationRate = 0.25f * _settings.Value.npcSettings.angularAccelerationMult;
                        break;
                    case "Actors\\AtronachFrost\\AtronachFrostProject.hkx":
                    {
                        raceCopy.ActorEffect.Remove(Engarde.ASpell.MCT_DefaultRaceSpell);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_ArmoredKW);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_CritImmune);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_NoStamina);
                        if (_settings.Value.npcSettings.addArmorToArmored)
                        {
                            raceCopy.ActorEffect.Add(Engarde.ASpell.MCT_BonusArmor500);
                        }

                        raceCopy.AngularAccelerationRate = 0.75f * _settings.Value.npcSettings.angularAccelerationMult;
                        raceCopy.UnarmedReach = 156;
                        raceCopy.Attacks.ForEach(SetAtronachFrostAttackData);

                        if (state.LoadOrder.ContainsKey(ModKey.FromNameAndExtension("Dwarfsphere.esp")) &&
                            (raceCopy.EditorID?.StartsWith("DwaSp") ?? false) &&
                            (raceCopy.EditorID?.Contains("Cleaner") ?? false))
                        {
                            raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerResist4);
                            raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerPower3);

                            raceCopy.BaseMass = 8;
                            raceCopy.UnarmedDamage = 50 * _settings.Value.npcSettings.unarmedDamageMult;
                        }
                        else
                        {
                            raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerResist3);
                            raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerPower3);

                            raceCopy.BaseMass = 6;
                            raceCopy.UnarmedDamage = 40 * _settings.Value.npcSettings.unarmedDamageMult;
                        }

                        break;
                    }
                    case "Actors\\AtronachStorm\\AtronachStormProject.hkx":
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_CritImmune);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_NoStamina);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerResist2);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerPower2);

                        raceCopy.BaseMass = 4;
                        raceCopy.AngularAccelerationRate = 0.25f * _settings.Value.npcSettings.angularAccelerationMult;
                        raceCopy.UnarmedReach = 160;
                        break;
                    case "Actors\\Bear\\BearProject.hkx":
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerResist2);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerPower2);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_PaddedKW);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_InjuryBleed);

                        raceCopy.BaseMass = 3.5f;
                        raceCopy.AngularAccelerationRate = 0.25f * _settings.Value.npcSettings.angularAccelerationMult;
                        raceCopy.UnarmedReach = 99;
                        raceCopy.UnarmedDamage *= 1.5f;
                        raceCopy.UnarmedReach *= 0.8f;

                        raceCopy.Attacks.ForEach(SetBearAttackData);
                        break;
                    case "Actors\\DLC02\\BoarRiekling\\BoarProject.hkx":
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerResist2);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerPower2);

                        raceCopy.Attacks.ForEach(x =>
                        {
                            if (!IsValidAttack(x)) return;
                            x.AttackData!.AttackType = Engarde.Keyword.MCT_VerticalAttack;
                        });
                        break;
                    case "Actors\\Cow\\HighlandCowProject.hkx":
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerResist1);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerPower1);
                        break;
                    case "Actors\\Chaurus\\ChaurusProject.hkx":
                    {
                        if (_settings.Value.npcSettings.addArmorToArmored)
                        {
                            raceCopy.ActorEffect.Add(Engarde.ASpell.MCT_BonusArmor250);
                        }

                        raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerResist2);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerPower2);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_ArmoredKW);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_WeakAgainstArmored);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_InjuryKnockDown);

                        raceCopy.BaseMass = 2.5f;
                        raceCopy.AngularAccelerationRate = 0.25f * _settings.Value.npcSettings.angularAccelerationMult;
                        raceCopy.UnarmedReach = 86;
                        break;
                    }
                    case "Actors\\DLC01\\ChaurusFlyer\\ChaurusFlyer.hkx":
                    {
                        if (_settings.Value.npcSettings.addArmorToArmored)
                        {
                            raceCopy.ActorEffect.Add(Engarde.ASpell.MCT_BonusArmor250);
                        }

                        raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerResist1);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerPower1);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_ArmoredKW);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_WeakAgainstArmored);

                        raceCopy.BaseMass = 1.5f;
                        raceCopy.AngularAccelerationRate = 0.25f * _settings.Value.npcSettings.angularAccelerationMult;
                        break;
                    }
                    case "Actors\\Deer\\DeerProject.hkx":
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerResist1);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerPower1);

                        raceCopy.AngularAccelerationRate = 1;
                        break;
                    case "Actors\\Canine\\DogProject.hkx":
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerResist0);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerPower0);

                        raceCopy.AngularAccelerationRate = 0.25f * _settings.Value.npcSettings.angularAccelerationMult;
                        break;
                    case "Actors\\Dragon\\DragonProject.hkx" when _settings.Value.npcSettings.dragonTweaks:
                    {
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_DragonRaceKW);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_ArmoredKW);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_CritImmune);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_DamagesStamina);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerPower4);

                        if (_settings.Value.npcSettings.addArmorToArmored)
                        {
                            raceCopy.ActorEffect.Add(Engarde.ASpell.MCT_BonusArmor500);
                        }

                        raceCopy.ActorEffect.Remove(Engarde.ASpell.MCT_DefaultRaceSpell);
                        raceCopy.ActorEffect.Add(Engarde.ASpell.MCT_StaminaDrainWhileFlying);

                        raceCopy.AngularAccelerationRate = 10;
                        raceCopy.Starting[BasicStat.Health] = 1500;
                        raceCopy.Starting[BasicStat.Stamina] = 350;
                        raceCopy.UnarmedReach = 180;
                        raceCopy.Regen[BasicStat.Health] = 0;
                        raceCopy.Regen[BasicStat.Stamina] = 1;
                        raceCopy.BaseMass = 10;
                        if (raceCopy.EditorID == "AlduinRace")
                        {
                            raceCopy.ActorEffect.Add(Engarde.ASpell.MCT_DragonAlduinRaceSpell);
                            raceCopy.UnarmedDamage = 150;
                        }
                        else
                        {
                            raceCopy.ActorEffect.Add(Engarde.ASpell.MCT_DragonRaceSpell);
                            raceCopy.UnarmedDamage = 100;
                        }

                        raceCopy.Attacks.ForEach(SetDragonAttackData);
                        break;
                    }
                    case "Actors\\Draugr\\DraugrProject.hkx":
                    {
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerResist1);
                        raceCopy.ActorEffect.Add(Engarde.ASpell.MCT_NPCRaceSpell);

                        raceCopy.BaseMass = 2;
                        raceCopy.AngularAccelerationRate = 0.12f * _settings.Value.npcSettings.angularAccelerationMult;
                        raceCopy.UnarmedReach = 77;

                        if (raceCopy.EditorID!.Contains("Skeleton"))
                        {
                            raceCopy.AddKeyword(Engarde.Keyword.MCT_ArmoredKW);

                            if (_settings.Value.npcSettings.addArmorToArmored)
                            {
                                raceCopy.ActorEffect.Add(Engarde.ASpell.MCT_BonusArmor250);
                            }

                            raceCopy.BaseMass = 1.5f;
                            raceCopy.AngularAccelerationRate =
                                0.25f * _settings.Value.npcSettings.angularAccelerationMult;
                        }

                        break;
                    }
                    case "Actors\\DLC02\\DwarvenBallistaCenturion\\BallistaCenturion.hkx":
                    {
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerResist1);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerPower1);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_CritImmune);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_DamagesStamina);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_ArmoredKW);

                        if (_settings.Value.npcSettings.addArmorToArmored)
                        {
                            raceCopy.ActorEffect.Add(Engarde.ASpell.MCT_BonusArmor250);
                        }

                        // base adjustment from vanilla
                        raceCopy.AngularAccelerationRate = 0.25f * _settings.Value.npcSettings.angularAccelerationMult;
                        break;
                    }
                    case "Actors\\DwarvenSteamCenturion\\SteamProject.hkx":
                    {
                        raceCopy.ActorEffect.Remove(Engarde.ASpell.MCT_DefaultRaceSpell);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_CritImmune);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerResist4);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerPower3);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_KnockDownImmune);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_DamagesStamina);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_ArmoredKW);

                        if (_settings.Value.npcSettings.addArmorToArmored)
                        {
                            raceCopy.ActorEffect.Add(Engarde.ASpell.MCT_BonusArmor500);
                        }

                        raceCopy.BaseMass = 8;
                        raceCopy.AngularAccelerationRate = 0.25f * _settings.Value.npcSettings.angularAccelerationMult;
                        raceCopy.UnarmedReach = 200;
                        raceCopy.Attacks.ForEach(SetDwarvenCenturionAttackData);
                        break;
                    }
                    case "Actors\\DwarvenSphereCenturion\\SphereCenturion.hkx":
                    {
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerResist1);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerPower1);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_InjuryStun);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_CritImmune);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_ArmoredKW);
                        if (_settings.Value.npcSettings.addArmorToArmored)
                        {
                            raceCopy.ActorEffect.Add(Engarde.ASpell.MCT_BonusArmor250);
                        }

                        raceCopy.BaseMass = 2.5f;
                        raceCopy.AngularAccelerationRate = 0.12f * _settings.Value.npcSettings.angularAccelerationMult;
                        raceCopy.UnarmedReach = 102;
                        raceCopy.Attacks.ForEach(SetDwarvenSphereAttackData);
                        break;
                    }
                    case "Actors\\DwarvenSpider\\DwarvenSpiderCenturionProject.hkx":
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerResist0);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerPower0);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_WeakAgainstArmored);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_CritImmune);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_ArmoredKW);
                        if (_settings.Value.npcSettings.addArmorToArmored)
                        {
                            raceCopy.ActorEffect.Add(Engarde.ASpell.MCT_BonusArmor250);
                        }

                        raceCopy.BaseMass = 1;
                        raceCopy.AngularAccelerationRate = 0.25f * _settings.Value.npcSettings.angularAccelerationMult;
                        raceCopy.UnarmedReach = 77;
                        break;
                    case "Actors\\DragonPriest\\Dragon_Priest.hkx":
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerResist1);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerPower1);

                        raceCopy.AngularAccelerationRate = 0.25f * _settings.Value.npcSettings.angularAccelerationMult;
                        raceCopy.UnarmedReach = 64;
                        break;
                    case "Actors\\Falmer\\FalmerProject.hkx":
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerResist1);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_InjuryAttackSpeed);
                        raceCopy.ActorEffect.Add(Engarde.ASpell.MCT_NPCRaceSpell);

                        raceCopy.BaseMass = 1.5f;
                        raceCopy.AngularAccelerationRate = 0.25f * _settings.Value.npcSettings.angularAccelerationMult;
                        raceCopy.UnarmedReach = 77;
                        raceCopy.Attacks.ForEach(SetFalmerAttackData);
                        break;
                    case "Actors\\FrostbiteSpider\\FrostbiteSpiderProject.hkx":
                    {
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_WeakAgainstArmored);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_InjuryKnockDown);
                        raceCopy.AngularAccelerationRate = 0.25f * _settings.Value.npcSettings.angularAccelerationMult;
                        raceCopy.UnarmedReach = 77;
                        if (raceCopy.EditorID!.Contains("Giant"))
                        {
                            raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerResist2);
                            raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerPower2);
                            raceCopy.BaseMass = 3;
                            var spellFormKey = Skyrim.ASpell.crSpider03PoisonBite;
                            raceCopy.Attacks.ForEach(x => SetSpiderAttackData(x, spellFormKey));
                        }
                        else if (raceCopy.EditorID.Contains("Large"))
                        {
                            raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerResist1);
                            raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerPower1);
                            raceCopy.BaseMass = 1;
                            var spellFormKey = Skyrim.ASpell.crSpider02PoisonBite;
                            raceCopy.Attacks.ForEach(x => SetSpiderAttackData(x, spellFormKey));
                        }
                        else
                        {
                            raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerResist0);
                            raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerPower0);
                            raceCopy.BaseMass = 0.2f;
                            var spellFormKey = Skyrim.ASpell.crSpider01PoisonBite;
                            raceCopy.Attacks.ForEach(x => SetSpiderAttackData(x, spellFormKey));
                        }

                        break;
                    }
                    case "Actors\\Giant\\GiantProject.hkx":
                    {
                        bool? isGiant = null;
                        if (raceCopy.EditorID!.Contains("Giant"))
                        {
                            raceCopy.AddKeyword(Engarde.Keyword.MCT_DamagesStamina);
                            raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerResist4);
                            raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerPower4);

                            raceCopy.BaseMass = 8;
                            raceCopy.Starting[BasicStat.Health] = 2700;
                            raceCopy.UnarmedDamage *= 2;
                            raceCopy.UnarmedReach = 250;
                            isGiant = true;
                        }
                        else
                        {
                            raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerResist3);
                            raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerPower3);

                            raceCopy.BaseMass = 6;
                        }

                        if (_settings.Value.npcSettings.addArmorToArmored)
                        {
                            raceCopy.ActorEffect.Add(Engarde.ASpell.MCT_BonusArmor250);
                        }

                        raceCopy.AddKeyword(Engarde.Keyword.MCT_GiantRaceKW);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_CritImmune);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_KnockDownImmune);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_InjuryMoveSpeed);

                        raceCopy.AngularAccelerationRate = 5;
                        if (_settings.Value.npcSettings.giantTweaks)
                        {
                            raceCopy.AddKeyword(Engarde.Keyword.MCT_StaminaControlledKW);
                            raceCopy.AddKeyword(Engarde.Keyword.MCT_CanEnrage);
                            raceCopy.Regen[BasicStat.Stamina] = 1;
                        }

                        raceCopy.Attacks.ForEach(x => SetGiantAttackData(x, isGiant ?? false));
                        break;
                    }
                    case "Actors\\Goat\\GoatProject.hkx":
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerResist0);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerPower0);

                        raceCopy.AngularAccelerationRate = 0.25f * _settings.Value.npcSettings.angularAccelerationMult;
                        break;
                    case "Actors\\Hagraven\\HagravenProject.hkx":
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerResist1);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerPower1);
                        raceCopy.AngularAccelerationRate = 0.25f * _settings.Value.npcSettings.angularAccelerationMult;
                        raceCopy.UnarmedReach = 64;
                        break;
                    case "Actors\\Horker\\HorkerProject.hkx":
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerResist2);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerPower1);

                        raceCopy.AngularAccelerationRate = 0.25f * _settings.Value.npcSettings.angularAccelerationMult;
                        raceCopy.UnarmedReach = 64;
                        break;
                    case "Actors\\Horse\\HorseProject.hkx":
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerResist2);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerPower1);

                        raceCopy.AngularAccelerationRate = 0.25f * _settings.Value.npcSettings.angularAccelerationMult;
                        break;
                    // humanoid npc races
                    case "Actors\\Character\\DefaultMale.hkx":
                    {
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_InjuryAttackSpeed);
                        raceCopy.ActorEffect.Add(Engarde.ASpell.MCT_NPCRaceSpell);

                        // Dremora
                        if (raceCopy.EditorID!.Contains("DremoraRace"))
                        {
                            raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerResist2);
                            raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerPower2);
                        }
                        else
                        {
                            // normal humanoid
                            raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerResist1);
                        }

                        // base adjustment from vanilla
                        raceCopy.AngularAccelerationRate = 0.25f * _settings.Value.npcSettings.angularAccelerationMult;
                        raceCopy.UnarmedReach = 64;

                        // no use, attacks added this way aren't valid without behvaior changes
                        // it'll do damage but no attack spell
                        //if (settings.comboAttacks) {
                        //	let addedAttack = xelib.AddArrayItem(record, 'Attacks', 'ATKD\\Damage Mult', '100.32');
                        //	xelib.SetFloatValue(addedAttack, 'ATKD\\Attack Chance', '33.0');
                        //	xelib.SetFloatValue(addedAttack, 'ATKD\\Attack Angle', '0.0');
                        //	xelib.SetFloatValue(addedAttack, 'ATKD\\Strike Angle', '35.0');
                        //	xelib.SetFloatValue(addedAttack, 'ATKD\\Stagger', '0.0');
                        //	xelib.SetFloatValue(addedAttack, 'ATKD\\Knockdown', '0.0');
                        //	xelib.SetFloatValue(addedAttack, 'ATKD\\Recovery Time', '0.0');
                        //	xelib.SetFloatValue(addedAttack, 'ATKD\\Stamina Mult', '1.0');
                        //	xelib.AddElementValue(addedAttack, 'ATKE - Attack Event', 'mct2hmComboStart');
                        //}
                        break;
                    }
                    case "Actors\\IceWraith\\IceWraithProject.hkx":
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerResist0);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerPower0);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_CritImmune);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_NoStamina);

                        raceCopy.BaseMass = 0.7f;
                        raceCopy.AngularAccelerationRate = 0.25f * _settings.Value.npcSettings.angularAccelerationMult;
                        raceCopy.UnarmedReach = 153;
                        break;
                    case "Actors\\Mammoth\\MammothProject.hkx":
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerResist4);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerPower4);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_KnockDownImmune);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_DamagesStamina);

                        raceCopy.AngularAccelerationRate = 0.5f * _settings.Value.npcSettings.angularAccelerationMult;
                        break;
                    case "Actors\\Mudcrab\\MudcrabProject.hkx":
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerResist0);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerPower0);

                        raceCopy.AngularAccelerationRate = 0.25f * _settings.Value.npcSettings.angularAccelerationMult;
                        raceCopy.UnarmedReach = 64;

                        raceCopy.Attacks.ForEach(x =>
                        {
                            if (!IsValidAttack(x)) return;
                            x.AttackData!.AttackType = Engarde.Keyword.MCT_VerticalAttack;
                        });
                        break;
                    case "Actors\\DLC02\\Riekling\\RieklingProject.hkx":
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerResist1);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerPower1);

                        raceCopy.BaseMass = 1;
                        raceCopy.Attacks.ForEach(x =>
                        {
                            if (!IsValidAttack(x)) return;
                            x.AttackData!.AttackType = Engarde.Keyword.MCT_VerticalAttack;
                        });
                        break;
                    case "Actors\\SabreCat\\SabreCatProject.hkx":
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerResist2);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerPower2);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_PaddedKW);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_InjuryBleed);
                        raceCopy.BaseMass = 3;
                        raceCopy.AngularAccelerationRate = 0.25f * _settings.Value.npcSettings.angularAccelerationMult;
                        raceCopy.UnarmedReach = 68;
                        raceCopy.UnarmedDamage *= 1.2f;

                        raceCopy.Attacks.ForEach(x =>
                        {
                            if (!IsValidAttack(x)) return;
                            x.AttackData!.AttackType = Engarde.Keyword.MCT_VerticalAttack;
                        });
                        break;
                    case "Actors\\Skeever\\SkeeverProject.hkx":
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerResist0);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerPower0);

                        raceCopy.AngularAccelerationRate = 0.25f * _settings.Value.npcSettings.angularAccelerationMult;
                        raceCopy.UnarmedReach = 64;

                        raceCopy.Attacks.ForEach(x =>
                        {
                            if (!IsValidAttack(x)) return;
                            x.AttackData!.AttackType = Engarde.Keyword.MCT_VerticalAttack;
                        });
                        break;
                    case "Actors\\Spriggan\\Spriggan.hkx":
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerResist1);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerPower1);

                        raceCopy.AngularAccelerationRate = 0.25f * _settings.Value.npcSettings.angularAccelerationMult;
                        raceCopy.UnarmedReach = 77;
                        break;
                    // VampireLord, not balanced yet
                    case "Actors\\Troll\\TrollProject.hkx":
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerResist2);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerPower2);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_DamagesStamina);

                        raceCopy.BaseMass = 3;
                        raceCopy.AngularAccelerationRate = 0.25f * _settings.Value.npcSettings.angularAccelerationMult;
                        raceCopy.UnarmedReach = 112;
                        raceCopy.Attacks.ForEach(SetTrollAttackData);
                        break;
                    case "Actors\\VampireLord\\VampireLord.hkx":
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerImmune);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_PaddedKW);
                        break;
                    case "Actors\\WerewolfBeast\\WerewolfBeastProject.hkx"
                        when _settings.Value.npcSettings.werewolfTweaks:
                    {
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_WerewolfRaceKW);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_WeakAgainstArmored);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_StaminaControlledKW);

                        raceCopy.Regen[BasicStat.Stamina] = 1;

                        bool isWerebeast = false;
                        if (raceCopy.EditorID?.Contains("Werebear") ?? false)
                        {
                            raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerPower2);
                            raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerResist4);
                            raceCopy.ActorEffect.Add(Engarde.ASpell.MCT_BonusArmor250);

                            raceCopy.BaseMass = 6;
                            if (growlEnabled)
                            {
                                raceCopy.UnarmedDamage = 10;
                            }
                            else
                            {
                                raceCopy.UnarmedDamage = 25 * _settings.Value.npcSettings.unarmedDamageMult;
                            }

                            raceCopy.UnarmedReach = 145;
                            raceCopy.Starting[BasicStat.Health] = 1000;
                            raceCopy.Starting[BasicStat.Stamina] = 450;
                            isWerebeast = true;
                        }
                        else if (raceCopy.EditorID!.Contains("Were"))
                        {
                            raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerPower1);
                            raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerResist3);
                            raceCopy.ActorEffect.Add(Engarde.ASpell.MCT_BonusArmor250);

                            raceCopy.BaseMass = 3;
                            if (growlEnabled)
                            {
                                raceCopy.UnarmedDamage = 10;
                            }
                            else
                            {
                                raceCopy.UnarmedDamage = 15 * _settings.Value.npcSettings.unarmedDamageMult;
                            }

                            raceCopy.UnarmedReach = 145;
                            raceCopy.Starting[BasicStat.Health] = 300;
                            raceCopy.Starting[BasicStat.Stamina] = 200;
                            isWerebeast = true;
                        }
                        else
                        {
                            raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerPower1);
                            raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerResist1);

                            raceCopy.BaseMass = 1.4f;
                            raceCopy.UnarmedDamage = 8 * _settings.Value.npcSettings.unarmedDamageMult;
                        }

                        raceCopy.Attacks.ForEach(attack => SetWerewolfAttackData(attack, isWerebeast, growlEnabled));
                        break;
                    }
                    case "Actors\\Wisp\\WispProject.hkx":
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerImmune);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_CritImmune);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_NoStamina);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_KnockDownImmune);

                        raceCopy.BaseMass = 0.2f;
                        raceCopy.AngularAccelerationRate = 1;
                        raceCopy.UnarmedReach = 77;
                        break;
                    case "Actors\\Witchlight\\WitchlightProject.hkx":
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerImmune);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_CritImmune);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_NoStamina);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_KnockDownImmune);

                        raceCopy.BaseMass = 0.2f;
                        raceCopy.AngularAccelerationRate = 0.25f * _settings.Value.npcSettings.angularAccelerationMult;
                        raceCopy.UnarmedReach = 64;
                        break;
                    case "Actors\\Canine\\WolfProject.hkx":
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerResist0);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerPower0);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_InjuryBleed);
                        raceCopy.AngularAccelerationRate = 0.3f * _settings.Value.npcSettings.angularAccelerationMult;
                        raceCopy.UnarmedReach = 64;
                        raceCopy.Attacks.ForEach(x =>
                        {
                            if (!IsValidAttack(x)) return;
                            x.AttackData!.AttackType = Engarde.Keyword.MCT_VerticalAttack;
                        });
                        break;
                }
            }
        }

        private static void PatchPerks(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            static IPerk CopyPerk(IPatcherState<ISkyrimMod, ISkyrimModGetter> patcherState, FormKey formKey)
            {
                IPerkGetter perk = patcherState.LinkCache.Resolve<IPerkGetter>(formKey);
                IPerk perkCopy = patcherState.PatchMod.Perks.GetOrAddAsOverride(perk);
                return perkCopy;
            }

            IPerk perkCopy = CopyPerk(state, Engarde.Perk.MCT_MultDamageOnForwardPowerAttack);
            PerkEntryPointModifyValue perkEffect = (PerkEntryPointModifyValue) perkCopy.Effects[0];
            perkEffect.Value = _settings.Value.powerAttacks.forwardDamageMult;

            perkCopy = CopyPerk(state, Engarde.Perk.MCT_MultDamageOnSidePowerAttack);
            perkEffect = (PerkEntryPointModifyValue) perkCopy.Effects[0];
            perkEffect.Value = _settings.Value.powerAttacks.sideDamageMult;

            perkCopy = CopyPerk(state, Engarde.Perk.MCT_ArrowAttackedSlowTimePerk);
            perkEffect = (PerkEntryPointModifyValue) perkCopy.Effects[0];
            perkEffect.Value *= _settings.Value.combatFocus.playerSpeedMult;

            perkCopy = CopyPerk(state, Engarde.Perk.MCT_PowerAttackedSlowTimePerk);
            perkEffect = (PerkEntryPointModifyValue) perkCopy.Effects[0];
            perkEffect.Value *= _settings.Value.combatFocus.playerSpeedMult;
        }

        private static void PatchNpcs(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            foreach (INpcGetter npc in state.LoadOrder.PriorityOrder.WinningOverrides<INpcGetter>())
            {
                string? npcRaceEdid = npc.Race.Resolve(state.LinkCache)!.EditorID;
                if (npc.Configuration.TemplateFlags.HasFlag(NpcConfiguration.TemplateFlag.SpellList) ||
                    npc.Race.IsNull || npcRaceEdid.IsNullOrEmpty())
                {
                    continue;
                }

                if (!( /*npcRaceEdid!.Contains("Dragon") && !npcRaceEdid.Contains("Priest")
                      || npcRaceEdid == "AlduinRace" ||*/ npcRaceEdid.Contains("GiantRace") ||
                                                          npcRaceEdid.Contains("LurkerRace") || npc.Attacks.Count != 0))
                {
                    continue;
                }

                if (_settings.Value.staggerSettings.weaponStagger)
                {
                    Npc npcCopy = npc.DeepCopy();
                    bool changed = false;
                    npcCopy.Attacks.ForEach(attack =>
                    {
                        if (!IsValidAttack(attack)) return;
                        if (attack.AttackData!.Spell.IsNull &&
                            !attack.AttackData.Flags.HasFlag(AttackData.Flag.BashAttack))
                        {
                            attack.AttackData.Spell = Engarde.ASpell.MCT_NormalAttackSpell;
                            changed = true;
                        }
                    });
                    if (changed)
                    {
                        state.PatchMod.Npcs.Set(npcCopy);
                    }
                }

                if (npcRaceEdid.Contains("GiantRace") || npcRaceEdid.Contains("LurkerRace"))
                {
                    INpc npcCopy = state.PatchMod.Npcs.GetOrAddAsOverride(npc);
                    npcCopy.Perks ??= new ExtendedList<PerkPlacement>();
                    npcCopy.Perks.Add(new PerkPlacement {Perk = Engarde.Perk.MCT_VolnerabilityCritical, Rank = 1});
                }
            }
        }

        private static void PatchAttacks(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            var leftHandAttack = new FormLink<IIdleRelationGetter>(Skyrim.IdleAnimation.LeftHandAttack);
            var mctAttackLeftH2H = new FormLink<IIdleRelationGetter>(Engarde.IdleAnimation.MCTAttackLeftH2H);
            var nonMountedCombatRight = new FormLink<IIdleRelationGetter>(Update.IdleAnimation.NonMountedCombatRight);
            IFormLink<IIdleRelationGetter> originalNormalAttackSibling = new FormLink<IIdleRelationGetter>();
            IFormLink<IIdleRelationGetter> originalH2HAttackSibling = new FormLink<IIdleRelationGetter>();
            IFormLink<IIdleRelationGetter> originalLeftHandAttackSibling = new FormLink<IIdleRelationGetter>();
            ConditionFloat staminaCondition = new()
            {
                CompareOperator = CompareOperator.GreaterThan,
                ComparisonValue = _settings.Value.staminaSettings.minimumStamina,
                Data = new FunctionConditionData
                {
                    Function = (ushort) ConditionData.Function.GetActorValue, ParameterOneNumber = 26
                }
            };
            ConditionFloat staminaPercentCondition = new()
            {
                CompareOperator = CompareOperator.GreaterThan,
                ComparisonValue = 0.5f,
                Data = new FunctionConditionData
                {
                    Function = (ushort) ConditionData.Function.GetActorValuePercent, ParameterOneNumber = 26
                }
            };
            ConditionFloat lastAttackIsRightCondition = new()
            {
                CompareOperator = CompareOperator.EqualTo,
                ComparisonValue = 1,
                Data = new FunctionConditionData
                {
                    Function = (ushort) ConditionData.Function.GetVMQuestVariable,
                    ParameterOneRecord = Engarde.Quest.MCT_StatChecker,
                    ParameterTwoString = "::lastAttackIsRightHand_var"
                }
            };
            ConditionFloat isStaggeringAttackCondition = new()
            {
                CompareOperator = CompareOperator.EqualTo,
                ComparisonValue = 1,
                Data = new FunctionConditionData
                {
                    Function = (ushort) ConditionData.Function.GetVMQuestVariable,
                    ParameterOneRecord = Engarde.Quest.MCT_StatChecker,
                    ParameterTwoString = "::isStaggeringAttack_var"
                }
            };
            if (_settings.Value.basicAttacks.basicAttackTweaks)
            {
                var idleCopy = CopyIdle(state, Skyrim.IdleAnimation.NormalAttack);
                idleCopy.Conditions[1].Flags ^= Condition.Flag.OR;
                idleCopy.Conditions.Add(staminaCondition);
                if (_settings.Value.basicAttacks.dwAttackTweaks)
                {
                    originalNormalAttackSibling = idleCopy.RelatedIdles[1];
                    idleCopy.RelatedIdles[1] = leftHandAttack;
                }

                idleCopy = CopyIdle(state, Skyrim.IdleAnimation.AttackRightH2H);
                idleCopy.Conditions.Add(staminaCondition);
                if (_settings.Value.basicAttacks.h2HAttackTweaks)
                {
                    originalH2HAttackSibling = idleCopy.RelatedIdles[1];
                    idleCopy.RelatedIdles[1] = mctAttackLeftH2H;
                }

                idleCopy = CopyIdle(state, Skyrim.IdleAnimation.BowAttack);
                idleCopy.Conditions.Add(staminaCondition);


                idleCopy = CopyIdle(state, Skyrim.IdleAnimation.DualWieldPowerAttack);
                idleCopy.Conditions.Add(staminaCondition);

                idleCopy = CopyIdle(state, Skyrim.IdleAnimation.PlayerStagger);
                ConditionData getAttackState = new FunctionConditionData
                {
                    Function = (ushort) ConditionData.Function.GetAttackState
                };
                idleCopy.Conditions.Add(new ConditionFloat
                {
                    CompareOperator = CompareOperator.EqualTo,
                    Flags = Condition.Flag.OR,
                    ComparisonValue = 1,
                    Data = getAttackState
                });
                idleCopy.Conditions.Add(new ConditionFloat
                {
                    CompareOperator = CompareOperator.EqualTo,
                    Flags = Condition.Flag.OR,
                    ComparisonValue = 2,
                    Data = getAttackState
                });
                idleCopy.AnimationEvent = "recoilLargeStart";
            }

            if (_settings.Value.basicAttacks.basicAttackTweaks && _settings.Value.basicAttacks.dwAttackTweaks)
            {
                IIdleAnimation idleCopy = CopyIdle(state, Skyrim.IdleAnimation.LeftHandAttack);
                originalLeftHandAttackSibling = idleCopy.RelatedIdles[1];
                idleCopy.RelatedIdles[0] = nonMountedCombatRight;
                idleCopy.RelatedIdles[1] = originalNormalAttackSibling;
                idleCopy.Conditions.Add(lastAttackIsRightCondition);
                idleCopy.Conditions.Add(staminaCondition);
            }

            if (_settings.Value.basicAttacks.basicAttackTweaks && _settings.Value.basicAttacks.h2HAttackTweaks)
            {
                IIdleAnimation idleCopy = CopyIdle(state, Skyrim.IdleAnimation.AttackLeftH2H);
                idleCopy.AnimationEvent = "blockStart";

                idleCopy = CopyIdle(state, Engarde.IdleAnimation.MCTAttackLeftH2H);
                idleCopy.RelatedIdles[0] = nonMountedCombatRight;
                idleCopy.RelatedIdles[1] = originalH2HAttackSibling;
                idleCopy.Conditions.Add(staminaCondition);
            }

            if (_settings.Value.powerAttacks.powerAttackTweaks)
            {
                var idle = state.LinkCache.Resolve<IIdleAnimationGetter>(Engarde.IdleAnimation.MCTPowerAttack);
                IIdleAnimation idleCopy = state.PatchMod.IdleAnimations.GetOrAddAsOverride(idle);
                idleCopy.RelatedIdles[0] = new FormLink<IIdleAnimationGetter>(Skyrim.IdleAnimation.SheathRight);
                idleCopy.RelatedIdles[1] =
                    new FormLink<IIdleAnimationGetter>(Skyrim.IdleAnimation.DefaultSheathe);
            }

            if (_settings.Value.npcSettings.dragonTweaks)
            {
                IIdleAnimation idleCopy = CopyIdle(state, Skyrim.IdleAnimation.DragonstaggerStart);
                idleCopy.Conditions.Add(isStaggeringAttackCondition);
            }

            if (_settings.Value.npcSettings.dragonTweaks)
            {
                IIdleAnimation idleCopy = CopyIdle(state, Skyrim.IdleAnimation.FlyStartTakeOff);
                idleCopy.Conditions.Add(staminaPercentCondition);

                idleCopy = CopyIdle(state, Skyrim.IdleAnimation.FlyStartTakeOffVertical);
                idleCopy.Conditions.Add(staminaPercentCondition);
            }

            if (_settings.Value.basicAttacks.dwAttackTweaks)
            {
                var idle = state.LinkCache.Resolve<IIdleAnimationGetter>(Skyrim.IdleAnimation.BlockingStart);
                IIdleAnimation idleCopy = state.PatchMod.IdleAnimations.GetOrAddAsOverride(idle);
                idleCopy.RelatedIdles[1] = originalLeftHandAttackSibling;
            }
        }

        private static void PatchPowerAttacks(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            Condition disableCondition = new ConditionFloat
            {
                CompareOperator = CompareOperator.EqualTo,
                ComparisonValue = 0,
                Data = new FunctionConditionData
                {
                    Function = (ushort) ConditionData.Function.GetIsID,
                    ParameterOneRecord = Skyrim.Npc.Player,
                }
            };

            if (_settings.Value.powerAttacks.powerAttackTweaks)
            {
                List<IIdleAnimation> idlesToDisable = new()
                {
                    CopyIdle(state, Skyrim.IdleAnimation.DualWieldPowerAttackRoot),
                    CopyIdle(state, Skyrim.IdleAnimation.DualWieldSpecialPowerAttack),
                    CopyIdle(state, Skyrim.IdleAnimation.DefaultSheathe),
                    CopyIdle(state, Skyrim.IdleAnimation.AttackRightPower2HMForwardSprinting),
                    CopyIdle(state, Skyrim.IdleAnimation.AttackRightPower2HWForwardSprinting),
                    CopyIdle(state, Skyrim.IdleAnimation.AttackRightPowerForwardSprinting),
                    CopyIdle(state, Skyrim.IdleAnimation.H2HRightHandPowerAttack),
                    CopyIdle(state, Skyrim.IdleAnimation.H2HLeftHandPowerAttack)
                };

                idlesToDisable.ForEach(idle => idle.Conditions.Add(disableCondition));


                IIdleAnimation idleCopy = CopyIdle(state, Skyrim.IdleAnimation.PowerBash);
                idleCopy.Conditions[1] = disableCondition;


                idleCopy = CopyIdle(state, Skyrim.IdleAnimation.PowerAttack);
                idleCopy.Conditions[0] = disableCondition;
            }
        }

        private static void PatchDodges(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            foreach (IIdleAnimationGetter idle in state.LoadOrder.PriorityOrder.WinningOverrides<IIdleAnimationGetter>()
            )
            {
                if (!_settings.Value.defensiveActions.defensiveActions)
                {
                    break;
                }

                if (idle.EditorID.IsNullOrEmpty())
                {
                    continue;
                }

                if (idle.EditorID.Contains("MCTHeavyArmorDodge") || idle.EditorID.Contains("MCTLightArmorDodge"))
                {
                    IIdleAnimation idleCopy = state.PatchMod.IdleAnimations.GetOrAddAsOverride(idle);
                    ConditionFloat condition = (ConditionFloat) idleCopy.Conditions[0];
                    condition.ComparisonValue = _settings.Value.staminaSettings.minimumDodgeStamina;
                    idleCopy.Conditions[0] = condition;
                }
                else if (idle.EditorID.Contains("HeavyArmor"))
                {
                    IIdleAnimation idleCopy = state.PatchMod.IdleAnimations.GetOrAddAsOverride(idle);
                    string animationType = "";
                    if (_settings.Value.defensiveActions.heavyArmorDodge == DodgeType.Step)
                    {
                        animationType = "Run";
                    }

                    string animationEvent = "mctEscape";
                    if (idleCopy.EditorID!.Contains("Forward"))
                    {
                        animationEvent += "Forward" + animationType + "Start";
                    }
                    else if (idleCopy.EditorID.Contains("Backward"))
                    {
                        animationEvent += "Backward" + animationType + "Start";
                    }
                    else if (idleCopy.EditorID.Contains("Right"))
                    {
                        animationEvent += "Right" + animationType + "Start";
                    }
                    else if (idleCopy.EditorID.Contains("Left"))
                    {
                        animationEvent += "Left" + animationType + "Start";
                    }
                    else
                    {
                        animationType = "Run";
                        animationEvent += "Standing" + animationType + "Start";
                    }

                    idleCopy.AnimationEvent = animationEvent;
                }
                else if (idle.EditorID.Contains("LightArmor"))
                {
                    IIdleAnimation idleCopy = state.PatchMod.IdleAnimations.GetOrAddAsOverride(idle);
                    string animationType = "";
                    if (_settings.Value.defensiveActions.lightArmorDodge == DodgeType.Step)
                    {
                        animationType = "Run";
                    }

                    string animationEvent = "mctEscape";
                    if (idleCopy.EditorID!.Contains("Forward"))
                    {
                        animationEvent += "Forward" + animationType + "Start";
                    }
                    else if (idleCopy.EditorID.Contains("Backward"))
                    {
                        animationEvent += "Backward" + animationType + "Start";
                    }
                    else if (idleCopy.EditorID.Contains("Right"))
                    {
                        animationEvent += "Right" + animationType + "Start";
                    }
                    else if (idleCopy.EditorID.Contains("Left"))
                    {
                        animationEvent += "Left" + animationType + "Start";
                    }
                    else
                    {
                        animationType = "Run";
                        animationEvent += "Standing" + animationType + "Start";
                    }

                    idleCopy.AnimationEvent = animationEvent;
                }
            }
        }

        private static void PatchWerewolves(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            if (!_settings.Value.npcSettings.werewolfTweaks || !_settings.Value.powerAttacks.powerAttackTweaks ||
                state.LoadOrder.ContainsKey(ModKey.FromNameAndExtension("Brevi_MoonlightTales.esp")))
            {
                return;
            }

            IIdleAnimation idleCopy = CopyIdle(state, Skyrim.IdleAnimation.WerewolfSheathe);
            idleCopy.RelatedIdles[1] = new FormLink<IIdleRelationGetter>(Engarde.IdleAnimation.MCTPowerAttackRootBeast);

            ConditionFloat condition = new()
            {
                CompareOperator = CompareOperator.GreaterThan,
                ComparisonValue = _settings.Value.staminaSettings.minimumStamina,
                Data = new FunctionConditionData
                {
                    Function = (ushort) ConditionData.Function.GetActorValue, ParameterOneNumber = 26
                }
            };

            idleCopy = CopyIdle(state, Skyrim.IdleAnimation.WerewolfRightAttackFast);
            idleCopy.Conditions.Add(condition);

            idleCopy = CopyIdle(state, Skyrim.IdleAnimation.WerewolfAttackLeftFast);
            idleCopy.Conditions.Add(condition);

            idleCopy = CopyIdle(state, Skyrim.IdleAnimation.AttackStartDualBackHand);
            idleCopy.Conditions.Add(condition);

            idleCopy = CopyIdle(state, Skyrim.IdleAnimation.WerewolfLeftPowerAttackRoot);
            idleCopy.Conditions[3].CompareOperator = CompareOperator.NotEqualTo;

            idleCopy = CopyIdle(state, Skyrim.IdleAnimation.WerewolfRightPowerAttackRoot);
            idleCopy.Conditions[3].CompareOperator = CompareOperator.NotEqualTo;

            idleCopy = CopyIdle(state, Engarde.IdleAnimation.MCTPowerAttackRootBeast);
            idleCopy.RelatedIdles[0] =
                new FormLink<IIdleRelationGetter>(Skyrim.IdleAnimation.WerewolfSheathRoot);
        }

        private static void PatchKillmoves(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            if (!_settings.Value.npcSettings.playerKillMoveImmune)
            {
                return;
            }

            Condition disableCondition = new ConditionFloat()
            {
                CompareOperator = CompareOperator.EqualTo,
                ComparisonValue = 0,
                Data = new FunctionConditionData
                {
                    Function = (ushort) ConditionData.Function.GetIsID,
                    ParameterOneRecord = Skyrim.Npc.Player,
                    Unknown3 = (int) Condition.RunOnType.Target // run on
                }
            };


            List<IIdleAnimation> killmovesToDisable = new()
            {
                CopyIdle(state, Skyrim.IdleAnimation.KillMoveShortRoot00),
                CopyIdle(state, Skyrim.IdleAnimation.KillMoveBackSideRoot00),
                CopyIdle(state, Skyrim.IdleAnimation.KillMoveShortRoot),
                CopyIdle(state, Skyrim.IdleAnimation.KillMoveBackSideRoot),
                CopyIdle(state, Skyrim.IdleAnimation.KillMoveDragonToNPC)
            };

            killmovesToDisable.ForEach(idle => idle.Conditions.Add(disableCondition));
        }

        private static void PatchIdles(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            foreach (IIdleAnimationGetter idle in state.LoadOrder.PriorityOrder.WinningOverrides<IIdleAnimationGetter>()
            )
            {
                if (idle.EditorID == "MCTDefensiveMoves" || idle.EditorID == "BlockHit" ||
                    idle.EditorID == "SneakStart" || idle.EditorID == "SneakStop")
                {
                    continue;
                }

                if (_settings.Value.defensiveActions.defensiveActions && Equals(idle.RelatedIdles[0],
                    new FormLink<IIdleRelationGetter>(Skyrim.IdleAnimation.SneakRoot)) && idle.RelatedIdles[1].IsNull)
                {
                    Condition wantToSneak = new ConditionFloat
                    {
                        CompareOperator = CompareOperator.NotEqualTo,
                        ComparisonValue = 1,
                        Data = new FunctionConditionData
                        {
                            Function = (ushort) ConditionData.Function.GetVMQuestVariable,
                            ParameterOneRecord = Engarde.Quest.MCT_SneakKeyListener,
                            ParameterTwoString = "::wantsToSneak_var"
                        }
                    };
                    IIdleAnimation idleCopy = state.PatchMod.IdleAnimations.GetOrAddAsOverride(idle);
                    idleCopy.Conditions.Add(wantToSneak);
                    idleCopy.RelatedIdles[1] =
                        new FormLink<IIdleRelationGetter>(Engarde.IdleAnimation.MCTDefensiveMoves);
                    _foundAnotherSneakRootChild = true;
                }
            }
        }

        private static void PatchDefensiveMoves(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            Condition isPowerBlocking = new ConditionFloat
            {
                ComparisonValue = 0,
                CompareOperator = CompareOperator.EqualTo,
                Data = new FunctionConditionData
                {
                    Function = (ushort) ConditionData.Function.HasMagicEffect,
                    ParameterOneRecord = Engarde.MagicEffect.MCT_PowerBlocking
                }
            };
            Condition isNotMovingForward = new ConditionFloat
            {
                ComparisonValue = 1,
                CompareOperator = CompareOperator.NotEqualTo,
                Data = new FunctionConditionData
                {
                    Function = (ushort) ConditionData.Function.GetMovementDirection
                }
            };
            Condition isNotPlayer = new ConditionFloat
            {
                ComparisonValue = 1,
                CompareOperator = CompareOperator.NotEqualTo,
                Flags = Condition.Flag.OR,
                Data = new FunctionConditionData
                {
                    Function = (ushort) ConditionData.Function.GetIsID,
                    ParameterOneRecord = Skyrim.Npc.Player
                }
            };
            Condition isSneakPressed = new ConditionFloat
            {
                ComparisonValue = 1,
                CompareOperator = CompareOperator.EqualTo,
                Flags = Condition.Flag.OR,
                Data = new FunctionConditionData
                {
                    Function = (ushort) ConditionData.Function.GetVMQuestVariable,
                    ParameterOneRecord = Engarde.Quest.MCT_SneakKeyListener,
                    ParameterTwoString = "::wantsToSneak_var"
                }
            };
            Condition isBlocking = new ConditionFloat
            {
                CompareOperator = CompareOperator.EqualTo,
                ComparisonValue = 1,
                Flags = Condition.Flag.OR,
                Data = new FunctionConditionData
                {
                    Function = (ushort) ConditionData.Function.IsBlocking
                }
            };
            Condition isStaggered = new ConditionFloat
            {
                CompareOperator = CompareOperator.EqualTo,
                ComparisonValue = 1,
                Flags = Condition.Flag.OR,
                Data = new FunctionConditionData
                {
                    Function = (ushort) ConditionData.Function.GetGraphVariableInt,
                    ParameterOneString = "IsStaggering"
                }
            };
            IIdleAnimation idleCopy;
            if (_settings.Value.defensiveActions.defensiveActions)
            {
                idleCopy = CopyIdle(state, Skyrim.IdleAnimation.BlockHit);
                idleCopy.Conditions.Add(isPowerBlocking);

                idleCopy = CopyIdle(state, Engarde.IdleAnimation.MCTDefensiveMoves);
                idleCopy.RelatedIdles[0] = new FormLink<IIdleRelationGetter>(Skyrim.IdleAnimation.SneakRoot);

                if (state.LoadOrder.ContainsKey(ModKey.FromNameAndExtension("Ultimate Dodge Mod.esp")))
                {
                    idleCopy.Conditions.Add(isBlocking);
                    idleCopy.Conditions.Add(isStaggered);
                }
            }

            if (_settings.Value.sprintToSneak)
            {
                idleCopy = CopyIdle(state, Skyrim.IdleAnimation.SneakStart);
                idleCopy.Conditions.Add(isNotMovingForward);
            }

            if (_settings.Value.defensiveActions.defensiveActions)
            {
                idleCopy = CopyIdle(state, Skyrim.IdleAnimation.SneakStart);
                idleCopy.Conditions.Add(isNotPlayer);
                idleCopy.Conditions.Add(isSneakPressed);

                if (!_foundAnotherSneakRootChild)
                {
                    idleCopy.RelatedIdles[1] =
                        new FormLink<IIdleRelationGetter>(Engarde.IdleAnimation.MCTDefensiveMoves);
                }
            }

            if (_settings.Value.sprintToSneak)
            {
                idleCopy = CopyIdle(state, Skyrim.IdleAnimation.SneakStop);
                idleCopy.Conditions.Add(isNotMovingForward);
            }
        }

        private static void PatchEffects(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            static IMagicEffect CopyEffect(IPatcherState<ISkyrimMod, ISkyrimModGetter> state, FormKey formKey)
            {
                var record = state.LinkCache.Resolve<IMagicEffectGetter>(formKey);
                IMagicEffect recordCopy = state.PatchMod.MagicEffects.GetOrAddAsOverride(record);
                return recordCopy;
            }

            VirtualMachineAdapter fireScript = new()
            {
                ObjectFormat = (ushort) 2,
                Scripts =
                {
                    new ScriptEntry
                    {
                        Flags = ScriptEntry.Flag.Local,
                        Name = "MCT_ApplyBurning",
                        Properties =
                        {
                            new ScriptObjectProperty
                            {
                                Name = "MCT_BurningSpell",
                                Flags = ScriptProperty.Flag.Edited,
                                Object = Engarde.ASpell.MCT_BurningSpell
                            }
                        }
                    }
                }
            };
            VirtualMachineAdapter frostScript = new()
            {
                ObjectFormat = (ushort) 2,
                Scripts =
                {
                    new ScriptEntry
                    {
                        Flags = ScriptEntry.Flag.Local,
                        Name = "MCT_ApplyFrostSlow",
                        Properties =
                        {
                            new ScriptObjectProperty
                            {
                                Name = "MCT_FrostSlowSpell",
                                Flags = ScriptProperty.Flag.Edited,
                                Object = Engarde.ASpell.MCT_FrostSlowSpell
                            }
                        }
                    }
                }
            };
            if (_settings.Value.npcSettings.dragonTweaks)
            {
                List<IMagicEffect> dragonBreaths = new()
                {
                    CopyEffect(state, Skyrim.MagicEffect.VoiceDragonFireBreathEffect1),
                    CopyEffect(state, Skyrim.MagicEffect.VoiceDragonFireballEffect1),
                    CopyEffect(state, Skyrim.MagicEffect.VoiceDragonFrostBreathEffect1),
                    CopyEffect(state, Skyrim.MagicEffect.VoiceDragonFrostIceStormEffect)
                };

                dragonBreaths.ForEach(effect => { effect.ResistValue = ActorValue.None; });
                for (int i = 0; i < 2; i++) // fire effects
                {
                    dragonBreaths[i].AddKeyword(Engarde.Keyword.MCT_BlockableSpell);
                    dragonBreaths[i].TaperDuration = 0.5f;
                    dragonBreaths[i].VirtualMachineAdapter = fireScript;
                }

                for (int i = 2; i < 5; i++) //frost effects
                {
                    dragonBreaths[i].SecondActorValueWeight = 0.1f; // less stamina damage
                    dragonBreaths[i].VirtualMachineAdapter = frostScript;
                }

                //is it better than doing it for each effect separately?
            }

            if (state.LoadOrder.ContainsKey(ModKey.FromNameAndExtension("Dragonborn.esm")))
            {
                IMagicEffect effectCopy = CopyEffect(state, Engarde.MagicEffect.MCT_DragonInjuryMouth);

                ExtendedList<ScriptProperty> properties = effectCopy.VirtualMachineAdapter!.Scripts[0].Properties;
                foreach (var scriptProperty in properties.Cast<ScriptObjectProperty>())
                {
                    scriptProperty.Object = scriptProperty.Name switch
                    {
                        "shout13" => Dragonborn.ASpell.DLC2DragonFireBreathShout06,
                        "shout14" => Dragonborn.ASpell.DLC2DragonFrostBreathShout06,
                        _ => scriptProperty.Object
                    };
                }
            }
        }

        private static void PatchSpells(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            static void AddStaggerEffects(ISpell spell)
            {
                EffectData staggerEffectData = new()
                {
                    Magnitude = 0,
                    Area = 0,
                    Duration = 1
                };
                Effect staggerEffect1 = new()
                {
                    BaseEffect = Engarde.MagicEffect.MCT_StaggersPlayer1,
                    Data = staggerEffectData
                };
                Effect staggerEffect2 = new()
                {
                    BaseEffect = Engarde.MagicEffect.MCT_StaggersPlayer2,
                    Data = staggerEffectData
                };
                Effect staggerEffect3 = new()
                {
                    BaseEffect = Engarde.MagicEffect.MCT_StaggersPlayer3,
                    Data = staggerEffectData
                };
                Effect staggerEffect4 = new()
                {
                    BaseEffect = Engarde.MagicEffect.MCT_StaggersPlayer4,
                    Data = staggerEffectData
                };
                Effect knockEffect = new()
                {
                    BaseEffect = Engarde.MagicEffect.MCT_KnockdownAirTarget,
                    Data = new EffectData
                    {
                        Magnitude = 0,
                        Area = 0,
                        Duration = 2
                    }
                };
                spell.Effects.Add(knockEffect);
                spell.Effects.Add(staggerEffect1);
                spell.Effects.Add(staggerEffect2);
                spell.Effects.Add(staggerEffect3);
                spell.Effects.Add(staggerEffect4);
            }

            static void AddPowerStaggerEffects(ISpell spell)
            {
                EffectData staggerEffectData = new()
                {
                    Magnitude = 0,
                    Area = 0,
                    Duration = 1
                };
                Effect staggerEffect1 = new()
                {
                    BaseEffect = Engarde.MagicEffect.MCT_PowerStaggersPlayer1,
                    Data = staggerEffectData
                };
                Effect staggerEffect2 = new()
                {
                    BaseEffect = Engarde.MagicEffect.MCT_PowerStaggersPlayer2,
                    Data = staggerEffectData
                };
                Effect staggerEffect3 = new()
                {
                    BaseEffect = Engarde.MagicEffect.MCT_PowerStaggersPlayer3,
                    Data = staggerEffectData
                };
                Effect staggerEffect4 = new()
                {
                    BaseEffect = Engarde.MagicEffect.MCT_PowerStaggersPlayer4,
                    Data = staggerEffectData
                };
                Effect knockEffect = new()
                {
                    BaseEffect = Engarde.MagicEffect.MCT_KnockdownAirTarget,
                    Data = new EffectData
                    {
                        Magnitude = 0,
                        Area = 0,
                        Duration = 2
                    }
                };
                spell.Effects.Add(knockEffect);
                spell.Effects.Add(staggerEffect1);
                spell.Effects.Add(staggerEffect2);
                spell.Effects.Add(staggerEffect3);
                spell.Effects.Add(staggerEffect4);
            }

            static ISpell CopySpell(IPatcherState<ISkyrimMod, ISkyrimModGetter> patcherState, FormKey formKey)
            {
                ISpellGetter spell = patcherState.LinkCache.Resolve<ISpellGetter>(formKey);
                ISpell spellCopy = patcherState.PatchMod.Spells.GetOrAddAsOverride(spell);
                return spellCopy;
            }

            static void TuneLDragonSpell(ISpell spell, int increment, int duration)
            {
                spell.Flags |= SpellDataFlag.IgnoreResistance;
                for (int i = 0; i < 5; i++)
                {
                    spell.Effects[i].Data!.Magnitude = 20 + i * increment;
                    spell.Effects[i].Data!.Duration = duration;
                }
            }

            static void TuneDragonBreathSpells(ISpell spell, float magnitude, int duration)
            {
                spell.Flags |= SpellDataFlag.IgnoreResistance;
                spell.Effects[0].Data ??= new EffectData();
                spell.Effects[0].Data!.Magnitude = magnitude;
                spell.Effects[0].Data!.Duration = duration;
            }


            var spellCopy = CopySpell(state, Engarde.ASpell.MCT_PowerAttackCoolDownSpell);
            spellCopy.Effects[0].Data!.Duration = _settings.Value.powerAttacks.powerAttackCooldown;

            spellCopy = CopySpell(state, Engarde.ASpell.MCT_NoStaminaRegenWhileRunning);
            spellCopy.Effects[0].Data!.Magnitude = _settings.Value.staminaSettings.runningStaminaRatePenalty;

            spellCopy = CopySpell(state, Engarde.ASpell.MCT_MeleeActorMonitorSpell);
            if (_settings.Value.npcSettings.staminaManagement)
            {
                spellCopy.Effects.Add(new Effect
                {
                    BaseEffect = Engarde.MagicEffect.MCT_ActorBehaviorStaminaControl,
                    Data = new EffectData
                    {
                        Magnitude = 300,
                        Area = 0,
                        Duration = 2
                    }
                });
                spellCopy.Effects.Add(new Effect
                {
                    BaseEffect = Engarde.MagicEffect.MCT_ActorBehaviorOutOfStaminaSpeed1,
                    Data = new EffectData
                    {
                        Magnitude = 45,
                        Area = 0,
                        Duration = 2
                    }
                });
                spellCopy.Effects.Add(new Effect
                {
                    BaseEffect = Engarde.MagicEffect.MCT_ActorBehaviorOutOfStaminaAttackSpeed1,
                    Data = new EffectData
                    {
                        Magnitude = 0.25f,
                        Area = 0,
                        Duration = 2
                    }
                });
                spellCopy.Effects.Add(new Effect
                {
                    BaseEffect = Engarde.MagicEffect.MCT_ActorBehaviorOutOfStaminaSpeed2,
                    Data = new EffectData
                    {
                        Magnitude = 25,
                        Area = 0,
                        Duration = 2
                    }
                });
                spellCopy.Effects.Add(new Effect
                {
                    BaseEffect = Engarde.MagicEffect.MCT_ActorBehaviorOutOfStaminaAttackSpeed2,
                    Data = new EffectData
                    {
                        Magnitude = 0.15f,
                        Area = 0,
                        Duration = 2
                    }
                });
            }

            if (_settings.Value.npcSettings.npcDodging)
            {
                spellCopy.Effects.Add(new Effect
                {
                    BaseEffect = Engarde.MagicEffect.MCT_NPCCanDodge,
                    Data = new EffectData
                    {
                        Magnitude = 0,
                        Area = 0,
                        Duration = 2
                    }
                });
            }

            if (_settings.Value.npcSettings.npcAttackWindup)
            {
                spellCopy.Effects.Add(new Effect
                {
                    BaseEffect = Engarde.MagicEffect.MCT_ActorBehaviorAttackWillWindUp,
                    Data = new EffectData
                    {
                        Magnitude = 0,
                        Area = 0,
                        Duration = 2
                    }
                });
            }

            if (_settings.Value.defensiveActions.defensiveActions)
            {
                spellCopy.Effects.Add(new Effect
                {
                    BaseEffect = Engarde.MagicEffect.MCT_ActorVerticalAttacking,
                    Data = new EffectData
                    {
                        Magnitude = 0,
                        Area = 0,
                        Duration = 1
                    }
                });
            }

            spellCopy = CopySpell(state, Engarde.ASpell.MCT_ArrowAttackedSlowTimeSpell);
            spellCopy.Effects[0].Data!.Magnitude *= _settings.Value.combatFocus.worldSpeedMult;
            spellCopy.Effects[0].Data!.Duration =
                (int) Math.Round(spellCopy.Effects[0].Data!.Duration * _settings.Value.combatFocus.durationMult);

            spellCopy = CopySpell(state, Engarde.ASpell.MCT_PowerAttackedSlow01TimeSpell);
            spellCopy.Effects[0].Data!.Magnitude *= _settings.Value.combatFocus.worldSpeedMult;
            spellCopy.Effects[0].Data!.Duration =
                (int) Math.Round(spellCopy.Effects[0].Data!.Duration * _settings.Value.combatFocus.durationMult);

            if (_settings.Value.npcSettings.giantTweaks)
            {
                Effect staggerBig = new()
                {
                    BaseEffect = Engarde.MagicEffect.MCT_StaggersPlayerFromGroundShake,
                    Data = new EffectData
                    {
                        Magnitude = 0.25f,
                        Area = 14,
                        Duration = 1
                    }
                };

                Effect staggerSmall = new()
                {
                    BaseEffect = Engarde.MagicEffect.MCT_StaggersPlayerFromGroundShake,
                    Data = new EffectData
                    {
                        Magnitude = 0.5f,
                        Area = 7,
                        Duration = 1
                    }
                };
                spellCopy = CopySpell(state, Skyrim.ASpell.crGiantClubSlam);
                spellCopy.Effects.RemoveAll(x =>
                    x.BaseEffect.FormKey == Skyrim.MagicEffect.crStaggerAttackAreaEffectGiantSlam);

                spellCopy.Effects.Add(staggerSmall);
                spellCopy.Effects.Add(staggerBig);

                spellCopy.Effects.Add(new Effect
                {
                    BaseEffect = Engarde.MagicEffect.MCT_KnockDown,
                    Data = new EffectData
                    {
                        Magnitude = 0,
                        Area = 0,
                        Duration = 0
                    }
                });

                spellCopy = CopySpell(state, Skyrim.ASpell.crGiantStomp);
                spellCopy.Effects.RemoveAll(x =>
                    x.BaseEffect.FormKey == Skyrim.MagicEffect.crStaggerAttackAreaEffectGiantStomp);
                spellCopy.Effects.Add(staggerSmall);
                spellCopy.Effects.Add(staggerBig);


                spellCopy = CopySpell(state, Skyrim.ASpell.crGiantMagicResistance);
                spellCopy.Effects[0].Data!.Magnitude = 66;
            }

            if (_settings.Value.npcSettings.dragonTweaks)
            {
                Effect staggerEffect4 = new()
                {
                    BaseEffect = Engarde.MagicEffect.MCT_StaggersPlayer4,
                    Data = new EffectData
                    {
                        Magnitude = 0,
                        Area = 0,
                        Duration = 1
                    }
                };
                spellCopy = CopySpell(state, Skyrim.ASpell.L_VoiceDragonFire01);
                TuneLDragonSpell(spellCopy, 5, 1);
                spellCopy.Effects.Add(staggerEffect4);

                spellCopy = CopySpell(state, Skyrim.ASpell.L_VoiceDragonFireBall01);
                TuneLDragonSpell(spellCopy, 10, 0);
                spellCopy.Effects.Add(staggerEffect4);

                spellCopy = CopySpell(state, Skyrim.ASpell.L_VoiceDragonFrost01);
                TuneLDragonSpell(spellCopy, 10, 1);
                spellCopy.Effects.RemoveAll(x => x.BaseEffect.FormKey == Skyrim.MagicEffect.FrostSlowConcAimed);

                spellCopy = CopySpell(state, Skyrim.ASpell.L_VoiceDragonFrostBall01);
                TuneLDragonSpell(spellCopy, 10, 0);
                spellCopy.Effects.RemoveAll(x => x.BaseEffect.FormKey == Skyrim.MagicEffect.FrostSlowConcAimed);

                List<ISpell> dragonShouts = new()
                {
                    CopySpell(state, Skyrim.ASpell.VoiceDragonFire01),
                    CopySpell(state, Skyrim.ASpell.VoiceDragonFire02),
                    CopySpell(state, Skyrim.ASpell.VoiceDragonFire03),
                    CopySpell(state, Skyrim.ASpell.VoiceDragonFire04),
                    CopySpell(state, Skyrim.ASpell.VoiceDragonFire05),
                    CopySpell(state, Dragonborn.ASpell.DLC2VoiceDragonFire06),
                    CopySpell(state, Skyrim.ASpell.VoiceDragonFireBall01),
                    CopySpell(state, Skyrim.ASpell.VoiceDragonFireBall02),
                    CopySpell(state, Skyrim.ASpell.VoiceDragonFireBall03),
                    CopySpell(state, Skyrim.ASpell.VoiceDragonFireBall04),
                    CopySpell(state, Skyrim.ASpell.VoiceDragonFireBall05),
                    CopySpell(state, Dragonborn.ASpell.DLC2VoiceDragonFireBall06),

                    CopySpell(state, Skyrim.ASpell.VoiceDragonFrost01),
                    CopySpell(state, Skyrim.ASpell.VoiceDragonFrost02),
                    CopySpell(state, Skyrim.ASpell.VoiceDragonFrost03),
                    CopySpell(state, Skyrim.ASpell.VoiceDragonFrost04),
                    CopySpell(state, Skyrim.ASpell.VoiceDragonFrost05),
                    CopySpell(state, Dragonborn.ASpell.DLC2VoiceDragonFrost06),
                    CopySpell(state, Skyrim.ASpell.VoiceDragonFrostBall01),
                    CopySpell(state, Skyrim.ASpell.VoiceDragonFrostBall02),
                    CopySpell(state, Skyrim.ASpell.VoiceDragonFrostBall03),
                    CopySpell(state, Skyrim.ASpell.VoiceDragonFrostBall04),
                    CopySpell(state, Skyrim.ASpell.VoiceDragonFrostBall05),
                    CopySpell(state, Dragonborn.ASpell.DLC2VoiceDragonFrostBall06),
                };

                for (int i = 0; i < 6; i++)
                {
                    TuneDragonBreathSpells(dragonShouts[i], 20 + 5 * i, 1);
                    dragonShouts[i].Effects.Add(staggerEffect4);
                }

                for (int i = 0; i < 6; i++)
                {
                    TuneDragonBreathSpells(dragonShouts[i + 6], 20 + 10 * i, 0);
                    dragonShouts[i + 6].Effects.Add(staggerEffect4);
                }

                for (int i = 0; i < 6; i++)
                {
                    TuneDragonBreathSpells(dragonShouts[i + 12], 20 + 10 * i, 1);
                    dragonShouts[i + 12].Effects
                        .RemoveAll(x => x.BaseEffect.FormKey == Skyrim.MagicEffect.FrostSlowConcAimed);
                }

                for (int i = 0; i < 6; i++)
                {
                    TuneDragonBreathSpells(dragonShouts[i + 18], 20 + 10 * i, 0);
                    dragonShouts[i + 18].Effects
                        .RemoveAll(x => x.BaseEffect.FormKey == Skyrim.MagicEffect.FrostSlowConcAimed);
                }
            }

            if (_settings.Value.staggerSettings.weaponStagger)
            {
                if (state.LoadOrder.ContainsKey(ModKey.FromNameAndExtension("Savage Skyrim Std.esp")))
                {
                    List<ISpell> savageSkyrimSpells = new List<ISpell>
                    {
                        CopySpell(state, SavageSkyrim.ASpell.__AA_Animal_ForceStagger),
                        CopySpell(state, SavageSkyrim.ASpell.__AB_Animal_PRED_BleedAttack_Bear),
                        CopySpell(state, SavageSkyrim.ASpell.__AB_Animal_PRED_BleedAttack_Skeever),
                        CopySpell(state, SavageSkyrim.ASpell.__AB_Animal_PRED_BleedAttack_SabreCat),
                        CopySpell(state, SavageSkyrim.ASpell.__AB_Animal_PRED_BleedAttack_Wolf)
                    };
                    savageSkyrimSpells.ForEach(x =>
                        x.Effects.RemoveAll(effect =>
                            effect.BaseEffect.FormKey == SavageSkyrim.MagicEffect.__A2_STHC_Stagger));

                    savageSkyrimSpells.ForEach(AddStaggerEffects);

                    ISpell powerStaggerSpell = CopySpell(state, SavageSkyrim.ASpell.__AA_Animal_ForceThrow_Small);

                    powerStaggerSpell.Effects.RemoveAll(x =>
                        x.BaseEffect.FormKey == SavageSkyrim.MagicEffect.__A2_STHC_ForceThrow_2);

                    AddPowerStaggerEffects(powerStaggerSpell);
                }

                List<ISpell> staggeringAttackSpells = new()
                {
                    CopySpell(state, Skyrim.ASpell.AAAFrostTouch),
                    CopySpell(state, Skyrim.ASpell.SilentMoonsEnchantSpell),
                    CopySpell(state, Skyrim.ASpell.crAtronachFlameMeleeAttack),
                    CopySpell(state, Skyrim.ASpell.crAtronachFlameMeleePowerAttack),
                    CopySpell(state, Skyrim.ASpell.crAtronachStormMeleeAttack),
                    CopySpell(state, Skyrim.ASpell.crAtronachFrostMeleeAttack),
                    CopySpell(state, Skyrim.ASpell.crChaurusPoisonBite01),
                    CopySpell(state, Skyrim.ASpell.crChaurusPoisonBite02),
                    CopySpell(state, Dawnguard.ASpell.DLC1crChaurusPoisonBite03),
                    CopySpell(state, Skyrim.ASpell.crSpider02PoisonBite),
                    CopySpell(state, Skyrim.ASpell.crSpider03PoisonBite),
                    CopySpell(state, Skyrim.ASpell.crSpider01PoisonBite),

                    CopySpell(state, Skyrim.ASpell.DiseaseAtaxia),
                    CopySpell(state, Skyrim.ASpell.DiseaseBoneBreakFever),
                    CopySpell(state, Skyrim.ASpell.DiseaseBrainRot),
                    CopySpell(state, Skyrim.ASpell.DiseaseRattles),
                    CopySpell(state, Skyrim.ASpell.DiseaseRockjoint),
                    CopySpell(state, Skyrim.ASpell.DiseaseWitbane),

                    CopySpell(state, Skyrim.ASpell.crFalmerPoisonedWeapon01),
                    CopySpell(state, Skyrim.ASpell.crFalmerPoisonedWeapon02),
                    CopySpell(state, Skyrim.ASpell.crFalmerPoisonedWeapon03),
                    CopySpell(state, Skyrim.ASpell.crFalmerPoisonedWeapon04),
                    CopySpell(state, Skyrim.ASpell.crFalmerPoisonedWeapon05),
                    CopySpell(state, Dawnguard.ASpell.DLC1crGargoyleSmallAbsorbHealth),
                    CopySpell(state, Dawnguard.ASpell.DLC1crGargoyleAbsorbHealth),
                    CopySpell(state, Dawnguard.ASpell.DLC1VampirePoisonTalons),
                    CopySpell(state, Dawnguard.ASpell.DLC1crDeathHoundMeleeAttack),
                    CopySpell(state, Dragonborn.ASpell.DLC2crAshGuadianMeleeAttack),
                    CopySpell(state, Dragonborn.ASpell.DLC2DiseaseDroops),
                    CopySpell(state, Dragonborn.ASpell.DLC2ExpSpiderAlbinoPoisonBite),
                    CopySpell(state, Dragonborn.ASpell.DLC2crFireWyrmMeleeAttack)
                };
                staggeringAttackSpells.ForEach(AddStaggerEffects);
                bool containsGrowl =
                    state.LoadOrder.ContainsKey(ModKey.FromNameAndExtension("Growl - Werebeasts of Skyrim.esp"));

                if (_settings.Value.npcSettings.werewolfTweaks)
                {
                    if (containsGrowl)
                    {
                        spellCopy = CopySpell(state, Growl.ASpell.HRI_Werewolf_Spell_Attack);
                        AddStaggerEffects(spellCopy);
                        EffectData staggerData = new EffectData
                        {
                            Magnitude = 0,
                            Area = 0,
                            Duration = 1
                        };
                        spellCopy.Effects.Add(new Effect
                        {
                            BaseEffect = Engarde.MagicEffect.MCT_StaggersOthers0,
                            Data = staggerData
                        });
                        spellCopy.Effects.Add(new Effect
                        {
                            BaseEffect = Engarde.MagicEffect.MCT_StaggersOthers1,
                            Data = staggerData
                        });
                    }

                    spellCopy = CopySpell(state, Skyrim.ASpell.AbWerewolf);

                    if (!containsGrowl)
                    {
                        spellCopy.Effects[1].Data!.Magnitude = 300;
                        spellCopy.Effects[2].Data!.Magnitude = 200;
                    }

                    spellCopy.Effects.Add(new Effect
                    {
                        BaseEffect = Engarde.MagicEffect.MCT_WeaponSpeedPenalty,
                        Data = new EffectData
                        {
                            Magnitude = 0.2f,
                            Area = 0,
                            Duration = 0
                        }
                    });

                    if (containsGrowl)
                    {
                        spellCopy = CopySpell(state, Dragonborn.ASpell.DLC2AbWerebear);

                        spellCopy.Effects[3].Data!.Magnitude = 300;
                        spellCopy.Effects[4].Data!.Magnitude = 400;

                        spellCopy.Effects.Add(new Effect
                        {
                            BaseEffect = Engarde.MagicEffect.MCT_WeaponSpeedPenalty,
                            Data = new EffectData
                            {
                                Magnitude = 0.3f,
                                Area = 0,
                                Duration = 0
                            }
                        });
                        spellCopy.Effects.Add(new Effect
                        {
                            BaseEffect = Engarde.MagicEffect.MCT_MoveSpeedPenalty,
                            Data = new EffectData
                            {
                                Magnitude = 30,
                                Area = 0,
                                Duration = 0
                            }
                        });
                    }

                    spellCopy = CopySpell(state, Skyrim.ASpell.WerewolfFeed);
                    spellCopy.Effects.Add(new Effect
                    {
                        BaseEffect = Engarde.MagicEffect.MCT_BeastFeed,
                        Data = new EffectData
                        {
                            Magnitude = 100,
                            Area = 0,
                            Duration = 0
                        }
                    });

                    List<ISpell> werewolfHowlSpells = new()
                    {
                        CopySpell(state, Skyrim.ASpell.HowlWerewolfFear1),
                        CopySpell(state, Skyrim.ASpell.HowlWerewolfFear2),
                        CopySpell(state, Skyrim.ASpell.HowlWerewolfFear3),
                        CopySpell(state, Skyrim.ASpell.HowlWerewolfDetectLife1),
                        CopySpell(state, Skyrim.ASpell.HowlWerewolfDetectLife2),
                        CopySpell(state, Skyrim.ASpell.HowlWerewolfDetectLife3),
                        CopySpell(state, Skyrim.ASpell.HowlWerewolfSummonWolves1),
                        CopySpell(state, Skyrim.ASpell.HowlWerewolfSummonWolves2),
                        CopySpell(state, Skyrim.ASpell.HowlWerewolfSummonWolves3)
                    };
                    if (containsGrowl)
                    {
                        werewolfHowlSpells.Add(CopySpell(state, Growl.ASpell.HRI_Howl_Spell_RevertForm));
                    }

                    werewolfHowlSpells.ForEach(spell =>
                    {
                        spell.Effects.Add(new Effect
                        {
                            BaseEffect = Engarde.MagicEffect.MCT_WerewolfHowl,
                            Data = new EffectData
                            {
                                Magnitude = 0,
                                Area = 0,
                                Duration = 0
                            }
                        });
                    });
                }
            }
        }

        private static void PatchWeaponSpeedEffects(IPatcherState<ISkyrimMod, ISkyrimModGetter> state,
            List<FormKey> weaponSpeedEffects, List<FormKey> leftWeaponSpeedEffects)
        {
            foreach (IMagicEffectGetter effect in state.LoadOrder.PriorityOrder.WinningOverrides<IMagicEffectGetter>())
            {
                if (effect.Archetype.ActorValue == ActorValue.WeaponSpeedMult ||
                    effect.SecondActorValue == ActorValue.WeaponSpeedMult)
                {
                    weaponSpeedEffects.Add(effect.FormKey);
                }

                if (effect.Archetype.ActorValue == ActorValue.LeftWeaponSpeedMultiply ||
                    effect.SecondActorValue == ActorValue.LeftWeaponSpeedMultiply)
                {
                    leftWeaponSpeedEffects.Add(effect.FormKey);
                }
            }
        }

        private static void PatchWeaponSpeedSpell(IPatcherState<ISkyrimMod, ISkyrimModGetter> state,
            List<FormKey> weaponSpeedEffects, List<FormKey> leftWeaponSpeedEffects)
        {
            if (!_settings.Value.fixAttackSpeed)
            {
                return;
            }

            foreach (ISpellGetter spell in state.LoadOrder.PriorityOrder.WinningOverrides<ISpellGetter>())
            {
                static void PatchSpell(IEffect effect)
                {
                    effect.Data!.Magnitude -= 1;
                }

                bool Predicate(IEffectGetter x) =>
                    (weaponSpeedEffects.Contains(x.BaseEffect.FormKey) ||
                     leftWeaponSpeedEffects.Contains(x.BaseEffect.FormKey)) && x.Data?.Magnitude > 1;

                bool haveWeaponSpeedEffect = spell.Effects.Any(Predicate);
                if (haveWeaponSpeedEffect)
                {
                    var spellCopy = state.PatchMod.Spells.GetOrAddAsOverride(spell);
                    spellCopy.Effects.Where(Predicate).ForEach(PatchSpell);
                }
            }
        }

        private static void PatchProjectiles(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            if (_settings.Value.npcSettings.dragonTweaks)
            {
                IProjectileGetter projectile =
                    state.LinkCache.Resolve<IProjectileGetter>(Skyrim.Projectile.DragonFrostProjectile01);
                var projectileCopy = state.PatchMod.Projectiles.GetOrAddAsOverride(projectile);
                projectileCopy.Model = new Model
                {
                    File = "Magic\\FXFrostBallWispyProjectile.nif"
                };
                projectileCopy.Type = Projectile.TypeEnum.Missile;
                projectileCopy.Speed = 500;
                projectileCopy.CollisionRadius = 20;

                // frost ball project, slower, bigger radius
                projectile =
                    state.LinkCache.Resolve<IProjectileGetter>(Skyrim.Projectile.DragonFrostBallWispyProjectile);
                projectileCopy = state.PatchMod.Projectiles.GetOrAddAsOverride(projectile);
                projectileCopy.Speed = 600;
                projectileCopy.CollisionRadius = 10;
            }
        }

        private static void PatchMovement(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            static IMovementType CopyMovt(IPatcherState<ISkyrimMod, ISkyrimModGetter> state, FormKey formKey)
            {
                var movt = state.LinkCache.Resolve<IMovementTypeGetter>(formKey);
                return state.PatchMod.MovementTypes.GetOrAddAsOverride(movt);
            }

            static void ChangeMovt(IMovementType movt, int speed, int forwardSpeed)
            {
                movt.LeftRun = speed;
                movt.RightRun = speed;
                movt.BackRun = speed;
                movt.ForwardRun = speed + forwardSpeed;
            }

            if (_settings.Value.movementSettings.patchSpeed)
            {
                IMovementType movtCopy = CopyMovt(state, Skyrim.MovementType.NPC_1HM_MT);
                ChangeMovt(movtCopy, _settings.Value.movementSettings.oneHandSpeed, 70);

                movtCopy = CopyMovt(state, Skyrim.MovementType.NPC_2HM_MT);
                ChangeMovt(movtCopy, _settings.Value.movementSettings.twoHandSpeed, 100);

                movtCopy = CopyMovt(state, Skyrim.MovementType.NPC_Bow_MT);
                ChangeMovt(movtCopy, _settings.Value.movementSettings.bowSpeed, 50);
            }

            if (_settings.Value.movementSettings.attackCommitment)
            {
                var movtCopy = CopyMovt(state, Skyrim.MovementType.NPC_Attacking_MT);
                movtCopy.LeftWalk = 30;
                movtCopy.LeftRun = 30;
                movtCopy.RightWalk = 30;
                movtCopy.RightRun = 30;
                movtCopy.ForwardWalk = 30;
                movtCopy.ForwardRun = 235;
                movtCopy.BackWalk = 30;
                movtCopy.BackRun = 30;
                movtCopy.RotateInPlaceWalk = 60;
                movtCopy.RotateInPlaceRun = 60;
                movtCopy.RotateWhileMovingRun = 60;

                movtCopy = CopyMovt(state, Skyrim.MovementType.NPC_Attacking2H_MT);
                movtCopy.LeftWalk = 10;
                movtCopy.LeftRun = 10;
                movtCopy.RightWalk = 10;
                movtCopy.RightRun = 10;
                movtCopy.ForwardWalk = 10;
                movtCopy.ForwardRun = 235;
                movtCopy.BackWalk = 10;
                movtCopy.BackRun = 10;
                movtCopy.RotateInPlaceWalk = 30;
                movtCopy.RotateInPlaceRun = 30;
                movtCopy.RotateWhileMovingRun = 30;
            }
        }

        #endregion

        private static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            List<FormKey> weaponSpeedEffects = new();
            List<FormKey> leftWeaponSpeedEffects = new();
            state.PatchGlobals();
            PatchArmors(state);
            PatchWeapons(state);
            PatchRaces(state);
            PatchPerks(state);
            PatchNpcs(state);
            PatchAttacks(state);
            PatchPowerAttacks(state);
            PatchDodges(state);
            PatchWerewolves(state);
            PatchKillmoves(state);
            PatchIdles(state);
            PatchDefensiveMoves(state);
            PatchEffects(state);
            PatchSpells(state);
            PatchWeaponSpeedEffects(state, weaponSpeedEffects, leftWeaponSpeedEffects);
            PatchWeaponSpeedSpell(state, weaponSpeedEffects, leftWeaponSpeedEffects);
            PatchProjectiles(state);
            PatchMovement(state);
        }
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;
using System.Threading.Tasks;
using Noggog;

namespace Engardeportingattempts
{
    public class Program
    {
        private static readonly ModKey Engarde = ModKey.FromNameAndExtension("Engarde.esp");
        private static Dictionary<string, FormKey> _mctKeywords = new Dictionary<string, FormKey>();
        private static Lazy<Settings> _settings = null!;

        private enum WeaponCritChance
        {
            None = 0,
            Low = 1,
            Medium = 2,
            High = 3
        }

        private enum WeaponArmorPenetration
        {
            Weak = -1,
            None = 0,
            Strong = 1
        }
        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetAutogeneratedSettings(
                    nickname: "Settings",
                    path: "settings.json",
                    out _settings)
                .Run(args, new RunPreferences()
                {
                    ActionsForEmptyArgs = new RunDefaultPatcher()
                    {
                        IdentifyingModKey = "MCTPatch.esp",
                        TargetRelease = GameRelease.SkyrimSE,
                    }
                });
        }

        private static readonly (string, uint)[] GlobalIDs =
        {
            ("sprintToSneak", 0x289FB6),
            ("attackSpeedFix", 0x24747E),
            ("playerAttackControl", 0x24644D),
            ("powerAttackControl", 0x24644E),
            ("staggerByArrow", 0x2551A0),
            ("powerAttackCooldown", 0x2659C0),
            ("CGOIntegration", 0x28A519)
        };

        private static void ChangeGlobalShortValue(IPatcherState<ISkyrimMod, ISkyrimModGetter> state, IGlobalGetter global, short? value)
        {
            var globalCopy = state.PatchMod.Globals.GetOrAddAsOverride(global);
            var globalShort = (IGlobalShort)globalCopy;
            globalShort.Data = value;
        }
        private static void AddKeyword(FormKey keywordForm, IKeyworded<IKeywordGetter> keyworded)
        {
            keyworded.Keywords ??= new ExtendedList<IFormLink<IKeywordGetter>>();
            keyworded.Keywords.Add(keywordForm);
        }
        private static void SetStagger(IWeapon weaponCopy, int defaultWeight, float multiplier)
        {
            float weight = weaponCopy.BasicStats!.Weight;
            if (weight <= 0)
            {
                weaponCopy.BasicStats!.Weight = defaultWeight;
            }
            weaponCopy.Data!.Stagger = weight * 0.01f * multiplier;
        }

        private static void SetCritDamage(IWeapon weaponCopy, float multiplier)
        {
            weaponCopy.Critical!.Damage = (ushort)Math.Round(weaponCopy.BasicStats!.Damage * multiplier);
        }

        private static void ChangeWeapon(IWeapon weaponCopy, int defaultWeight, float damageMult = 1,
            float reachMult = 1, float speedMult = 1, float critMult = 1, float staggerMult = 1,
            WeaponCritChance critChance = 0, WeaponArmorPenetration armorPenetration = 0)
        {
            string critKey = critChance switch
            {
                WeaponCritChance.Low => "MCT_CanCritLow",
                WeaponCritChance.Medium => "MCT_CanCritMed",
                WeaponCritChance.High => "MCT_CanCritHigh",
                _ => "None"
            };
            if (_mctKeywords.TryGetValue(critKey, out var keyword))
            {
                AddKeyword(keyword, weaponCopy);
            }
            if (weaponCopy.Data!.Flags.HasFlag(WeaponData.Flag.BoundWeapon))
            {
                weaponCopy.BasicStats!.Weight = defaultWeight;
                if (_mctKeywords.TryGetValue("MCT_PenetratesArmorKW", out keyword))
                {
                    AddKeyword(keyword, weaponCopy);
                }
            }
            else
            {
                switch(armorPenetration)
                {
                    case WeaponArmorPenetration.Weak:
                        if (_mctKeywords.TryGetValue("MCT_WeakAgainstArmored", out keyword))
                        {
                            AddKeyword(keyword, weaponCopy);
                        }
                        break;
                    case WeaponArmorPenetration.Strong:
                        if (_mctKeywords.TryGetValue("MCT_PenetratesArmorKW", out keyword))
                        {
                            AddKeyword(keyword, weaponCopy);
                        }
                        break;
                }
            }
            weaponCopy.BasicStats!.Damage = (ushort)Math.Round(weaponCopy.BasicStats.Damage * damageMult);
            weaponCopy.Data.Speed *= speedMult;
            weaponCopy.Data.Reach *= reachMult;
            SetStagger(weaponCopy, defaultWeight, staggerMult);
            SetCritDamage(weaponCopy, _settings.Value.weaponCritDamageMult * critMult);
        }

        private static void PatchArmors(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            foreach (var armor in state.LoadOrder.PriorityOrder.WinningOverrides<IArmorGetter>())
            {
                if (armor.MajorFlags.HasFlag(Armor.MajorFlag.NonPlayable)
                    || !armor.TemplateArmor.IsNull
                    || (!armor.BodyTemplate?.FirstPersonFlags.HasFlag(BipedObjectFlag.Body) ?? true))
                {
                    continue;
                }
                if (armor.BodyTemplate!.ArmorType == ArmorType.LightArmor)
                {
                    var armorCopy = state.PatchMod.Armors.GetOrAddAsOverride(armor);
                    armorCopy.Keywords ??= new ExtendedList<IFormLink<IKeywordGetter>>();
                    _mctKeywords.TryGetValue("MCT_StaggerResist1", out FormKey staggerResistKeyword);
                    armorCopy.Keywords.Add(staggerResistKeyword);
                }
                else if (armor.BodyTemplate!.ArmorType == ArmorType.HeavyArmor)
                {
                    var armorCopy = state.PatchMod.Armors.GetOrAddAsOverride(armor);
                    armorCopy.Keywords ??= new ExtendedList<IFormLink<IKeywordGetter>>();
                    _mctKeywords.TryGetValue("MCT_StaggerResist2", out FormKey staggerResistKeyword);
                    _mctKeywords.TryGetValue("MCT_ArmoredKW", out FormKey armoredKeyword);
                    armorCopy.Keywords.Add(staggerResistKeyword);
                    armorCopy.Keywords.Add(armoredKeyword);
                }
            }
        }
        /*private static readonly (string Key, uint Id)[] keywordsTuple =
        {
            ("MCT_ArmoredKW", 0x0028FF),
            ("MCT_WeakAgainstArmored", 0x0E3805),
            ("MCT_CanCritHigh", 0x0E3806),
            ("MCT_CanCritMed", 0x111124),
            ("MCT_CanCritLow", 0x111125),
            ("MCT_CritImmune", 0x111126
            "MCT_InjuryAttackSpeed", 0x13EA56
            "MCT_InjuryBleed", 0x13EA57
            "MCT_InjuryStun", 0x13EA58
            "MCT_InjuryKnockDown", 0x13EA59
            "MCT_InjuryMoveSpeed", 0x13EA5A
            "MCT_PowerAttackCoolDownKW", 0x22C9DC
            "MCT_StaggerImmune", 0x24A510
            "MCT_StaggerResist0", 0x2561C8
            "MCT_StaggerResist1", 0x2561C9
            "MCT_StaggerResist2", 0x2561CA
            "MCT_StaggerResist3", 0x2561CB
            "MCT_StaggerResist4", 0x2561CC
            "MCT_StaggerPower0", 0x25775B
            "MCT_StaggerPower1", 0x25775C
            "MCT_StaggerPower2", 0x25775D
            "MCT_StaggerPower3", 0x25775E
            "MCT_StaggerPower4", 0x25775F
            "MCT_SprintAttack", 0x26D5A1
            "MCT_NormalAttackRight", 0x26E067
            "MCT_NormalAttackLeft", 0x26E068
            "MCT_StompAttack", 0x2700B5
            "MCT_GiantRaceKW", 0x270618
            "MCT_StaminaControlledKW", 0x27210E
            "MCT_CanEnrage", 0x272675
            "MCT_InjuryEffect", 0x272BD9
            "MCT_DragonRaceKW", 0x273140
            "MCT_DragonTailAttackLeft", 0x27416B
            "MCT_DragonTailAttackRight", 0x27416D
            "MCT_DragonTailAttack", 0x27416E
             "MCT_BlockableSpell", 0x277748
             "MCT_PowerBlockingKW", 0x27DDB1
             "MCT_VerticalAttack", 0x2808D7
             "MCT_PenetratesArmorKW", 0x281901
             "MCT_WerewolfRaceKW", 0x28DB00
             "MCT_PaddedKW", 0x0028FD
             "MCT_DefensiveAttack", 0x2936A2
             "MCT_SweepAttack", 0x294169
        };*/
        private static void PatchGlobals(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            Dictionary<string, IGlobalShortGetter> globals = new Dictionary<string, IGlobalShortGetter>();

            foreach (var globalId in GlobalIDs)
            {
                FormKey globalForm = Engarde.MakeFormKey(globalId.Item2);
                if (!state.LinkCache.TryResolve<IGlobalShortGetter>(globalForm, out var globalLink))
                    throw new Exception($"Unable to find required global: {globalForm}");
                globals.Add(globalLink.EditorID!, globalLink);
            }

            if (globals.TryGetValue("MCT_SprintToSneakEnabled", out var global))
            {
                if (_settings.Value.sprintToSneak)
                {
                    ChangeGlobalShortValue(state, global, 1);
                }
                else
                {
                    ChangeGlobalShortValue(state, global, 0);
                }
            }

            if (globals.TryGetValue("MCT_AttackSpeedFixEnabled", out global))
            {
                if (_settings.Value.fixAttackSpeed)
                {
                    ChangeGlobalShortValue(state, global, 1);
                }
                else
                {
                    ChangeGlobalShortValue(state, global, 0);
                }
            }

            if (globals.TryGetValue("MCT_PlayerAttackControlEnabled", out global))
            {
                if (_settings.Value.basicAttackTweaks)
                {
                    ChangeGlobalShortValue(state, global, 1);
                }
                else
                {
                    ChangeGlobalShortValue(state, global, 0);
                }
            }

            if (globals.TryGetValue("MCT_PowerAttackControlEnabled", out global))
            {
                if (_settings.Value.powerAttackTweaks)
                {
                    ChangeGlobalShortValue(state, global, 1);
                }
                else
                {
                    ChangeGlobalShortValue(state, global, 0);
                }
            }
            if (globals.TryGetValue("MCT_StaggerByArrowEnabled", out global))
            {
                if (_settings.Value.bowStagger)
                {
                    ChangeGlobalShortValue(state, global, 1);
                }
                else
                {
                    ChangeGlobalShortValue(state, global, 0);
                }
            }

            if (globals.TryGetValue("MCT_CGOIntegrationEnabled", out global))
            {
                if (state.LoadOrder.TryGetIfEnabled(ModKey.FromNameAndExtension("DSerCombatGameplayOverhaul.esp"), out _))
                {
                    ChangeGlobalShortValue(state, global, 1);
                }
                else
                {
                    ChangeGlobalShortValue(state, global, 0);
                }
            }

            if (globals.TryGetValue("MCT_StaggerByArrowEnabled", out global))
            {
                ChangeGlobalShortValue(state, global, _settings.Value.powerAttackCooldown);
            }
        }

        private static void PatchWeapons(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            ModKey masterKey = ModKey.FromNameAndExtension("Skyrim.esm");
            SkyrimMod master = new SkyrimMod(masterKey, SkyrimRelease.SkyrimSE);
            Keyword battleaxeKeyword = new Keyword(master, "WeapTypeBattleaxe");
            Keyword warhammerKeyword = new Keyword(master, "WeapTypeWarhammer");
            if (!state.LinkCache.TryResolve<ISpellGetter>(Engarde.MakeFormKey(0x23BCE7), out var critAttackSpell))
            {
                throw new Exception($"Crit Attack spell ID:xx23BCE7 not found, check your Engarde.esp");
            }
            foreach (var weapon in state.LoadOrder.PriorityOrder.WinningOverrides<IWeaponGetter>())
            {
                if (!weapon.Template.IsNull || weapon.Data == null)
                {
                    continue;
                }
                var weaponCopy = state.PatchMod.Weapons.GetOrAddAsOverride(weapon);
                weaponCopy.Data!.Speed *= _settings.Value.weaponSpeedMult;
                weaponCopy.Data!.Reach *= _settings.Value.weaponReachMult;
                ushort damage = weaponCopy.BasicStats!.Damage;
                weaponCopy.BasicStats!.Damage = (ushort)Math.Round(damage * _settings.Value.weaponDamageMult);
                if (weaponCopy.BasicStats.Weight == 0)
                {
                    weaponCopy.BasicStats.Weight = 4;
                }
                if (_settings.Value.critStagger && (weaponCopy.Critical?.Effect.IsNull ?? false))
                {
                    weaponCopy.Critical.Effect = critAttackSpell.AsLink();
                }
                if (weaponCopy.Data.AnimationType == WeaponAnimationType.HandToHand)
                {
                    if (weaponCopy.Data.Flags.HasFlag(WeaponData.Flag.BoundWeapon))
                    {
                        weaponCopy.BasicStats.Weight = 2;
                        if (_mctKeywords.TryGetValue("MCT_PenetratesArmorKW", out var keyword))
                        {
                            AddKeyword(keyword, weaponCopy);
                        }
                    }
                    if (weaponCopy.EditorID == "HRI_Lycan_Weapon_UnarmedWereformWeapon")
                    {
                        weaponCopy.BasicStats.Weight = 4;
                        if (_mctKeywords.TryGetValue("MCT_WeakAgainstArmored", out var keyword))
                        {
                            AddKeyword(keyword, weaponCopy);
                        }
                    }
                }
                else if (weaponCopy.Data.AnimationType == WeaponAnimationType.OneHandSword)
                {
                    ChangeWeapon(weaponCopy, 8, reachMult: 1.15f, staggerMult: 0.85f,
                                 critChance: WeaponCritChance.Medium, armorPenetration: WeaponArmorPenetration.Weak);
                }
                else if (weaponCopy.Data.AnimationType == WeaponAnimationType.OneHandDagger)
                {
                    ChangeWeapon(weaponCopy, 3, critMult: 2, critChance: WeaponCritChance.High, armorPenetration: WeaponArmorPenetration.Weak);
                }
                else if (weaponCopy.Data.AnimationType == WeaponAnimationType.OneHandAxe)
                {
                    ChangeWeapon(weaponCopy, 10, 1.1f, 0.8f, 1.1f);
                }
                else if (weaponCopy.Data.AnimationType == WeaponAnimationType.OneHandMace)
                {
                    ChangeWeapon(weaponCopy, 12, critMult: 0.5f);
                }
                else if (weaponCopy.Data.AnimationType == WeaponAnimationType.TwoHandSword)
                {
                    ChangeWeapon(weaponCopy, 14, 0.9f, 1.15f, staggerMult: 1.35f, critChance: WeaponCritChance.Low);
                }
                else if (weaponCopy.Data.AnimationType == WeaponAnimationType.TwoHandAxe)
                {
                    if (weaponCopy.Keywords?.Contains(warhammerKeyword) ?? false)
                    {
                        ChangeWeapon(weaponCopy, 18, 0.9f, speedMult: 0.9f, critMult: 0.5f, staggerMult: 1.65f,
                                     armorPenetration: WeaponArmorPenetration.Strong);
                    }
                    else if (weaponCopy.Keywords?.Contains(battleaxeKeyword) ?? false)
                    {
                        ChangeWeapon(weaponCopy, 16, reachMult: 0.8f, speedMult: 1.1f, staggerMult: 1.5f);
                    }
                }
                else if (weaponCopy.Data.AnimationType == WeaponAnimationType.Bow)
                {
                    if (weaponCopy.EditorID?.ToLower().Contains("crossbow") ?? false)
                    {
                        ChangeWeapon(weaponCopy, 12, critMult: 2, staggerMult: 1.5f, armorPenetration: WeaponArmorPenetration.Strong);
                    }
                    else
                    {
                        ChangeWeapon(weaponCopy, 8, armorPenetration: WeaponArmorPenetration.Weak);
                    }
                }
                else if (weaponCopy.Data.AnimationType == WeaponAnimationType.Crossbow)
                {
                    ChangeWeapon(weaponCopy, 12, critMult: 2, staggerMult: 1.5f, armorPenetration: WeaponArmorPenetration.Strong);
                }
                else if (weaponCopy.Data.AnimationType == WeaponAnimationType.Staff)
                {
                    ChangeWeapon(weaponCopy, 8, reachMult: 1.15f, critMult: 0.5f, armorPenetration: WeaponArmorPenetration.Weak);
                }
            }
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            if (state.LoadOrder.TryGetIfEnabled(Engarde, out var listing))
            {
                _mctKeywords = listing.Mod!.Keywords.ToDictionary(x => x.EditorID!, x => x.FormKey);
            }
            else
            {
                throw new Exception("Engarde.esp not active in your load order or doesn`t exist!");
            }

            PatchGlobals(state);
            PatchArmors(state);
            PatchWeapons(state);
        }
    }
}
